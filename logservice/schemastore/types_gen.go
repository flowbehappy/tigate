package schemastore

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PersistedDDLEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "type":
			z.Type, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "current_schema_id":
			z.CurrentSchemaID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentSchemaID")
				return
			}
		case "current_table_id":
			z.CurrentTableID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentTableID")
				return
			}
		case "current_schema_name":
			z.CurrentSchemaName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CurrentSchemaName")
				return
			}
		case "current_table_name":
			z.CurrentTableName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CurrentTableName")
				return
			}
		case "prev_schema_id":
			z.PrevSchemaID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "PrevSchemaID")
				return
			}
		case "prev_table_id":
			z.PrevTableID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "PrevTableID")
				return
			}
		case "prev_schema_name":
			z.PrevSchemaName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PrevSchemaName")
				return
			}
		case "prev_table_name":
			z.PrevTableName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PrevTableName")
				return
			}
		case "prev_partitions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PrevPartitions")
				return
			}
			if cap(z.PrevPartitions) >= int(zb0002) {
				z.PrevPartitions = (z.PrevPartitions)[:zb0002]
			} else {
				z.PrevPartitions = make([]int64, zb0002)
			}
			for za0001 := range z.PrevPartitions {
				z.PrevPartitions[za0001], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "PrevPartitions", za0001)
					return
				}
			}
		case "query":
			z.Query, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "schema_version":
			z.SchemaVersion, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SchemaVersion")
				return
			}
		case "table_info_value":
			z.TableInfoValue, err = dc.ReadBytes(z.TableInfoValue)
			if err != nil {
				err = msgp.WrapError(err, "TableInfoValue")
				return
			}
		case "finished_ts":
			z.FinishedTs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FinishedTs")
				return
			}
		case "multi_table_info_value":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "MultipleTableInfosValue")
				return
			}
			if cap(z.MultipleTableInfosValue) >= int(zb0003) {
				z.MultipleTableInfosValue = (z.MultipleTableInfosValue)[:zb0003]
			} else {
				z.MultipleTableInfosValue = make([][]byte, zb0003)
			}
			for za0002 := range z.MultipleTableInfosValue {
				z.MultipleTableInfosValue[za0002], err = dc.ReadBytes(z.MultipleTableInfosValue[za0002])
				if err != nil {
					err = msgp.WrapError(err, "MultipleTableInfosValue", za0002)
					return
				}
			}
		case "bdr_role":
			z.BDRRole, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BDRRole")
				return
			}
		case "cdc_write_source":
			z.CDCWriteSource, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "CDCWriteSource")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PersistedDDLEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 18
	// write "id"
	err = en.Append(0xde, 0x0, 0x12, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "current_schema_id"
	err = en.Append(0xb1, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CurrentSchemaID)
	if err != nil {
		err = msgp.WrapError(err, "CurrentSchemaID")
		return
	}
	// write "current_table_id"
	err = en.Append(0xb0, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CurrentTableID)
	if err != nil {
		err = msgp.WrapError(err, "CurrentTableID")
		return
	}
	// write "current_schema_name"
	err = en.Append(0xb3, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.CurrentSchemaName)
	if err != nil {
		err = msgp.WrapError(err, "CurrentSchemaName")
		return
	}
	// write "current_table_name"
	err = en.Append(0xb2, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.CurrentTableName)
	if err != nil {
		err = msgp.WrapError(err, "CurrentTableName")
		return
	}
	// write "prev_schema_id"
	err = en.Append(0xae, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.PrevSchemaID)
	if err != nil {
		err = msgp.WrapError(err, "PrevSchemaID")
		return
	}
	// write "prev_table_id"
	err = en.Append(0xad, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.PrevTableID)
	if err != nil {
		err = msgp.WrapError(err, "PrevTableID")
		return
	}
	// write "prev_schema_name"
	err = en.Append(0xb0, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.PrevSchemaName)
	if err != nil {
		err = msgp.WrapError(err, "PrevSchemaName")
		return
	}
	// write "prev_table_name"
	err = en.Append(0xaf, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.PrevTableName)
	if err != nil {
		err = msgp.WrapError(err, "PrevTableName")
		return
	}
	// write "prev_partitions"
	err = en.Append(0xaf, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PrevPartitions)))
	if err != nil {
		err = msgp.WrapError(err, "PrevPartitions")
		return
	}
	for za0001 := range z.PrevPartitions {
		err = en.WriteInt64(z.PrevPartitions[za0001])
		if err != nil {
			err = msgp.WrapError(err, "PrevPartitions", za0001)
			return
		}
	}
	// write "query"
	err = en.Append(0xa5, 0x71, 0x75, 0x65, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Query)
	if err != nil {
		err = msgp.WrapError(err, "Query")
		return
	}
	// write "schema_version"
	err = en.Append(0xae, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SchemaVersion)
	if err != nil {
		err = msgp.WrapError(err, "SchemaVersion")
		return
	}
	// write "table_info_value"
	err = en.Append(0xb0, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.TableInfoValue)
	if err != nil {
		err = msgp.WrapError(err, "TableInfoValue")
		return
	}
	// write "finished_ts"
	err = en.Append(0xab, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FinishedTs)
	if err != nil {
		err = msgp.WrapError(err, "FinishedTs")
		return
	}
	// write "multi_table_info_value"
	err = en.Append(0xb6, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.MultipleTableInfosValue)))
	if err != nil {
		err = msgp.WrapError(err, "MultipleTableInfosValue")
		return
	}
	for za0002 := range z.MultipleTableInfosValue {
		err = en.WriteBytes(z.MultipleTableInfosValue[za0002])
		if err != nil {
			err = msgp.WrapError(err, "MultipleTableInfosValue", za0002)
			return
		}
	}
	// write "bdr_role"
	err = en.Append(0xa8, 0x62, 0x64, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.BDRRole)
	if err != nil {
		err = msgp.WrapError(err, "BDRRole")
		return
	}
	// write "cdc_write_source"
	err = en.Append(0xb0, 0x63, 0x64, 0x63, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.CDCWriteSource)
	if err != nil {
		err = msgp.WrapError(err, "CDCWriteSource")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PersistedDDLEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 18
	// string "id"
	o = append(o, 0xde, 0x0, 0x12, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.ID)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, z.Type)
	// string "current_schema_id"
	o = append(o, 0xb1, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CurrentSchemaID)
	// string "current_table_id"
	o = append(o, 0xb0, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CurrentTableID)
	// string "current_schema_name"
	o = append(o, 0xb3, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.CurrentSchemaName)
	// string "current_table_name"
	o = append(o, 0xb2, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.CurrentTableName)
	// string "prev_schema_id"
	o = append(o, 0xae, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.PrevSchemaID)
	// string "prev_table_id"
	o = append(o, 0xad, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.PrevTableID)
	// string "prev_schema_name"
	o = append(o, 0xb0, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.PrevSchemaName)
	// string "prev_table_name"
	o = append(o, 0xaf, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.PrevTableName)
	// string "prev_partitions"
	o = append(o, 0xaf, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PrevPartitions)))
	for za0001 := range z.PrevPartitions {
		o = msgp.AppendInt64(o, z.PrevPartitions[za0001])
	}
	// string "query"
	o = append(o, 0xa5, 0x71, 0x75, 0x65, 0x72, 0x79)
	o = msgp.AppendString(o, z.Query)
	// string "schema_version"
	o = append(o, 0xae, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt64(o, z.SchemaVersion)
	// string "table_info_value"
	o = append(o, 0xb0, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.TableInfoValue)
	// string "finished_ts"
	o = append(o, 0xab, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x73)
	o = msgp.AppendUint64(o, z.FinishedTs)
	// string "multi_table_info_value"
	o = append(o, 0xb6, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MultipleTableInfosValue)))
	for za0002 := range z.MultipleTableInfosValue {
		o = msgp.AppendBytes(o, z.MultipleTableInfosValue[za0002])
	}
	// string "bdr_role"
	o = append(o, 0xa8, 0x62, 0x64, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65)
	o = msgp.AppendString(o, z.BDRRole)
	// string "cdc_write_source"
	o = append(o, 0xb0, 0x63, 0x64, 0x63, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.CDCWriteSource)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PersistedDDLEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "current_schema_id":
			z.CurrentSchemaID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentSchemaID")
				return
			}
		case "current_table_id":
			z.CurrentTableID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentTableID")
				return
			}
		case "current_schema_name":
			z.CurrentSchemaName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentSchemaName")
				return
			}
		case "current_table_name":
			z.CurrentTableName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentTableName")
				return
			}
		case "prev_schema_id":
			z.PrevSchemaID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevSchemaID")
				return
			}
		case "prev_table_id":
			z.PrevTableID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevTableID")
				return
			}
		case "prev_schema_name":
			z.PrevSchemaName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevSchemaName")
				return
			}
		case "prev_table_name":
			z.PrevTableName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevTableName")
				return
			}
		case "prev_partitions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevPartitions")
				return
			}
			if cap(z.PrevPartitions) >= int(zb0002) {
				z.PrevPartitions = (z.PrevPartitions)[:zb0002]
			} else {
				z.PrevPartitions = make([]int64, zb0002)
			}
			for za0001 := range z.PrevPartitions {
				z.PrevPartitions[za0001], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrevPartitions", za0001)
					return
				}
			}
		case "query":
			z.Query, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Query")
				return
			}
		case "schema_version":
			z.SchemaVersion, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SchemaVersion")
				return
			}
		case "table_info_value":
			z.TableInfoValue, bts, err = msgp.ReadBytesBytes(bts, z.TableInfoValue)
			if err != nil {
				err = msgp.WrapError(err, "TableInfoValue")
				return
			}
		case "finished_ts":
			z.FinishedTs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FinishedTs")
				return
			}
		case "multi_table_info_value":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MultipleTableInfosValue")
				return
			}
			if cap(z.MultipleTableInfosValue) >= int(zb0003) {
				z.MultipleTableInfosValue = (z.MultipleTableInfosValue)[:zb0003]
			} else {
				z.MultipleTableInfosValue = make([][]byte, zb0003)
			}
			for za0002 := range z.MultipleTableInfosValue {
				z.MultipleTableInfosValue[za0002], bts, err = msgp.ReadBytesBytes(bts, z.MultipleTableInfosValue[za0002])
				if err != nil {
					err = msgp.WrapError(err, "MultipleTableInfosValue", za0002)
					return
				}
			}
		case "bdr_role":
			z.BDRRole, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BDRRole")
				return
			}
		case "cdc_write_source":
			z.CDCWriteSource, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CDCWriteSource")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PersistedDDLEvent) Msgsize() (s int) {
	s = 3 + 3 + msgp.Int64Size + 5 + msgp.ByteSize + 18 + msgp.Int64Size + 17 + msgp.Int64Size + 20 + msgp.StringPrefixSize + len(z.CurrentSchemaName) + 19 + msgp.StringPrefixSize + len(z.CurrentTableName) + 15 + msgp.Int64Size + 14 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.PrevSchemaName) + 16 + msgp.StringPrefixSize + len(z.PrevTableName) + 16 + msgp.ArrayHeaderSize + (len(z.PrevPartitions) * (msgp.Int64Size)) + 6 + msgp.StringPrefixSize + len(z.Query) + 15 + msgp.Int64Size + 17 + msgp.BytesPrefixSize + len(z.TableInfoValue) + 12 + msgp.Uint64Size + 23 + msgp.ArrayHeaderSize
	for za0002 := range z.MultipleTableInfosValue {
		s += msgp.BytesPrefixSize + len(z.MultipleTableInfosValue[za0002])
	}
	s += 9 + msgp.StringPrefixSize + len(z.BDRRole) + 17 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PersistedTableInfoEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "schema_id":
			z.SchemaID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SchemaID")
				return
			}
		case "schema_name":
			z.SchemaName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SchemaName")
				return
			}
		case "table_info_value":
			z.TableInfoValue, err = dc.ReadBytes(z.TableInfoValue)
			if err != nil {
				err = msgp.WrapError(err, "TableInfoValue")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PersistedTableInfoEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "schema_id"
	err = en.Append(0x83, 0xa9, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SchemaID)
	if err != nil {
		err = msgp.WrapError(err, "SchemaID")
		return
	}
	// write "schema_name"
	err = en.Append(0xab, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.SchemaName)
	if err != nil {
		err = msgp.WrapError(err, "SchemaName")
		return
	}
	// write "table_info_value"
	err = en.Append(0xb0, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.TableInfoValue)
	if err != nil {
		err = msgp.WrapError(err, "TableInfoValue")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PersistedTableInfoEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "schema_id"
	o = append(o, 0x83, 0xa9, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.SchemaID)
	// string "schema_name"
	o = append(o, 0xab, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.SchemaName)
	// string "table_info_value"
	o = append(o, 0xb0, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.TableInfoValue)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PersistedTableInfoEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "schema_id":
			z.SchemaID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SchemaID")
				return
			}
		case "schema_name":
			z.SchemaName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SchemaName")
				return
			}
		case "table_info_value":
			z.TableInfoValue, bts, err = msgp.ReadBytesBytes(bts, z.TableInfoValue)
			if err != nil {
				err = msgp.WrapError(err, "TableInfoValue")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PersistedTableInfoEntry) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.SchemaName) + 17 + msgp.BytesPrefixSize + len(z.TableInfoValue)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UpperBoundMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "finished_ddl_ts":
			z.FinishedDDLTs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FinishedDDLTs")
				return
			}
		case "schema_version":
			z.SchemaVersion, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SchemaVersion")
				return
			}
		case "resolved_ts":
			z.ResolvedTs, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ResolvedTs")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UpperBoundMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "finished_ddl_ts"
	err = en.Append(0x83, 0xaf, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FinishedDDLTs)
	if err != nil {
		err = msgp.WrapError(err, "FinishedDDLTs")
		return
	}
	// write "schema_version"
	err = en.Append(0xae, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SchemaVersion)
	if err != nil {
		err = msgp.WrapError(err, "SchemaVersion")
		return
	}
	// write "resolved_ts"
	err = en.Append(0xab, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ResolvedTs)
	if err != nil {
		err = msgp.WrapError(err, "ResolvedTs")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UpperBoundMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "finished_ddl_ts"
	o = append(o, 0x83, 0xaf, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x73)
	o = msgp.AppendUint64(o, z.FinishedDDLTs)
	// string "schema_version"
	o = append(o, 0xae, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt64(o, z.SchemaVersion)
	// string "resolved_ts"
	o = append(o, 0xab, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x73)
	o = msgp.AppendUint64(o, z.ResolvedTs)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UpperBoundMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "finished_ddl_ts":
			z.FinishedDDLTs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FinishedDDLTs")
				return
			}
		case "schema_version":
			z.SchemaVersion, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SchemaVersion")
				return
			}
		case "resolved_ts":
			z.ResolvedTs, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResolvedTs")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UpperBoundMeta) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint64Size + 15 + msgp.Int64Size + 12 + msgp.Uint64Size
	return
}
