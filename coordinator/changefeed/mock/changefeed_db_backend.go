// Code generated by MockGen. DO NOT EDIT.
// Source: coordinator/changefeed/changefeed_db_backend.go

// Package mock_changefeed is a generated GoMock package.
package mock_changefeed

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	changefeed "github.com/pingcap/ticdc/coordinator/changefeed"
	common "github.com/pingcap/ticdc/pkg/common"
	config "github.com/pingcap/ticdc/pkg/config"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CreateChangefeed mocks base method.
func (m *MockBackend) CreateChangefeed(ctx context.Context, info *config.ChangeFeedInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChangefeed", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChangefeed indicates an expected call of CreateChangefeed.
func (mr *MockBackendMockRecorder) CreateChangefeed(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangefeed", reflect.TypeOf((*MockBackend)(nil).CreateChangefeed), ctx, info)
}

// DeleteChangefeed mocks base method.
func (m *MockBackend) DeleteChangefeed(ctx context.Context, id common.ChangeFeedID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChangefeed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChangefeed indicates an expected call of DeleteChangefeed.
func (mr *MockBackendMockRecorder) DeleteChangefeed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChangefeed", reflect.TypeOf((*MockBackend)(nil).DeleteChangefeed), ctx, id)
}

// GetAllChangefeeds mocks base method.
func (m *MockBackend) GetAllChangefeeds(ctx context.Context) (map[common.ChangeFeedID]*changefeed.ChangefeedMetaWrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChangefeeds", ctx)
	ret0, _ := ret[0].(map[common.ChangeFeedID]*changefeed.ChangefeedMetaWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChangefeeds indicates an expected call of GetAllChangefeeds.
func (mr *MockBackendMockRecorder) GetAllChangefeeds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChangefeeds", reflect.TypeOf((*MockBackend)(nil).GetAllChangefeeds), ctx)
}

// PauseChangefeed mocks base method.
func (m *MockBackend) PauseChangefeed(ctx context.Context, id common.ChangeFeedID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseChangefeed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseChangefeed indicates an expected call of PauseChangefeed.
func (mr *MockBackendMockRecorder) PauseChangefeed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseChangefeed", reflect.TypeOf((*MockBackend)(nil).PauseChangefeed), ctx, id)
}

// ResumeChangefeed mocks base method.
func (m *MockBackend) ResumeChangefeed(ctx context.Context, id common.ChangeFeedID, newCheckpointTs uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeChangefeed", ctx, id, newCheckpointTs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeChangefeed indicates an expected call of ResumeChangefeed.
func (mr *MockBackendMockRecorder) ResumeChangefeed(ctx, id, newCheckpointTs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeChangefeed", reflect.TypeOf((*MockBackend)(nil).ResumeChangefeed), ctx, id, newCheckpointTs)
}

// SetChangefeedProgress mocks base method.
func (m *MockBackend) SetChangefeedProgress(ctx context.Context, id common.ChangeFeedID, progress config.Progress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChangefeedProgress", ctx, id, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChangefeedProgress indicates an expected call of SetChangefeedProgress.
func (mr *MockBackendMockRecorder) SetChangefeedProgress(ctx, id, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChangefeedProgress", reflect.TypeOf((*MockBackend)(nil).SetChangefeedProgress), ctx, id, progress)
}

// UpdateChangefeed mocks base method.
func (m *MockBackend) UpdateChangefeed(ctx context.Context, info *config.ChangeFeedInfo, checkpointTs uint64, progress config.Progress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChangefeed", ctx, info, checkpointTs, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChangefeed indicates an expected call of UpdateChangefeed.
func (mr *MockBackendMockRecorder) UpdateChangefeed(ctx, info, checkpointTs, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangefeed", reflect.TypeOf((*MockBackend)(nil).UpdateChangefeed), ctx, info, checkpointTs, progress)
}

// UpdateChangefeedCheckpointTs mocks base method.
func (m *MockBackend) UpdateChangefeedCheckpointTs(ctx context.Context, cps map[common.ChangeFeedID]uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChangefeedCheckpointTs", ctx, cps)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChangefeedCheckpointTs indicates an expected call of UpdateChangefeedCheckpointTs.
func (mr *MockBackendMockRecorder) UpdateChangefeedCheckpointTs(ctx, cps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangefeedCheckpointTs", reflect.TypeOf((*MockBackend)(nil).UpdateChangefeedCheckpointTs), ctx, cps)
}
