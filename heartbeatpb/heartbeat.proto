syntax = "proto3";
package heartbeatpb;
option go_package = "./heartbeatpb";

message TableSpan {
    uint64 TableID   = 1;
	bytes StartKey  = 2;
	bytes EndKey    = 3;
}

message TableSpanProgress {
    TableSpan span = 1;
    bool IsBlocked      = 2;
	uint64 BlockTs         = 3;
	repeated TableSpan BlockTableSpan = 4;
	uint64 CheckpointTs    = 5;
    uint64 dispatcherID = 6;
}

message HeartBeatRequest {
    repeated TableSpanProgress progress = 1;
     uint64 eventDispatcherManagerID = 2;
} 

enum Action {
    None = 0;
    Write = 1;
    Pass = 2;
}

message TableProgress {
    TableSpan span = 1;
    bool IsBlocked      = 2;
    uint64 BlockTs         = 3;
    uint64 CheckpointTs    = 4;
}

// 这名字重新取，我真的要吐了
message TableProgressInfo {
    uint64 dispatcherID = 1; // for which dispatcher
    repeated TableProgress tableProgresses = 2; // 救命了这名字取得
    Action action = 3;

}
message HeartBeatResponse {
    repeated TableProgressInfo info = 1;
    uint64 eventDispatcherManagerID = 2;
}

service HeartBeat {
    rpc HeartBeat(stream HeartBeatRequest) returns (stream HeartBeatResponse);
}



message CreateEventDispatcherManagerRequest {
    uint64 changefeedID = 1;
}

message CreateEventDispatcherManagerResponse { // 需要么，标记删除成功？
    uint64 changefeedID = 1;
}

message RemoveEventDispatcherManagerRequest {
    uint64 changefeedID = 1;
}

message RemoveEventDispatcherManagerResponse {
    uint64 changefeedID = 1;
}

service DispatcherManager {
    // 为 changefeed 创建 dispatcher manager（bootstrap）
    rpc CreateEventDispatcherManager(stream CreateEventDispatcherManagerRequest) returns (stream CreateEventDispatcherManagerResponse);
    // remove changefeed 的时候发送，删除 event dispatcher manager
    rpc RemoveEventDispatcherManager(stream RemoveEventDispatcherManagerRequest) returns (stream RemoveEventDispatcherManagerResponse);
}