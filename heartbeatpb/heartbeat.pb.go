// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heartbeatpb/heartbeat.proto

package heartbeatpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_Write Action = 0
	Action_Pass  Action = 1
)

var Action_name = map[int32]string{
	0: "Write",
	1: "Pass",
}

var Action_value = map[string]int32{
	"Write": 0,
	"Pass":  1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}

type ScheduleAction int32

const (
	ScheduleAction_Create ScheduleAction = 0
	ScheduleAction_Remove ScheduleAction = 1
)

var ScheduleAction_name = map[int32]string{
	0: "Create",
	1: "Remove",
}

var ScheduleAction_value = map[string]int32{
	"Create": 0,
	"Remove": 1,
}

func (x ScheduleAction) String() string {
	return proto.EnumName(ScheduleAction_name, int32(x))
}

func (ScheduleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{1}
}

type BlockStage int32

const (
	BlockStage_NONE    BlockStage = 0
	BlockStage_WAITING BlockStage = 1
	BlockStage_WRITING BlockStage = 2
	BlockStage_DONE    BlockStage = 3
)

var BlockStage_name = map[int32]string{
	0: "NONE",
	1: "WAITING",
	2: "WRITING",
	3: "DONE",
}

var BlockStage_value = map[string]int32{
	"NONE":    0,
	"WAITING": 1,
	"WRITING": 2,
	"DONE":    3,
}

func (x BlockStage) String() string {
	return proto.EnumName(BlockStage_name, int32(x))
}

func (BlockStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{2}
}

type InfluenceType int32

const (
	InfluenceType_All    InfluenceType = 0
	InfluenceType_DB     InfluenceType = 1
	InfluenceType_Normal InfluenceType = 2
)

var InfluenceType_name = map[int32]string{
	0: "All",
	1: "DB",
	2: "Normal",
}

var InfluenceType_value = map[string]int32{
	"All":    0,
	"DB":     1,
	"Normal": 2,
}

func (x InfluenceType) String() string {
	return proto.EnumName(InfluenceType_name, int32(x))
}

func (InfluenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{3}
}

type ComponentState int32

const (
	ComponentState_Working ComponentState = 0
	ComponentState_Stopped ComponentState = 1
	ComponentState_Removed ComponentState = 2
)

var ComponentState_name = map[int32]string{
	0: "Working",
	1: "Stopped",
	2: "Removed",
}

var ComponentState_value = map[string]int32{
	"Working": 0,
	"Stopped": 1,
	"Removed": 2,
}

func (x ComponentState) String() string {
	return proto.EnumName(ComponentState_name, int32(x))
}

func (ComponentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{4}
}

type TableSpan struct {
	TableID  int64  `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	StartKey []byte `protobuf:"bytes,2,opt,name=StartKey,proto3" json:"StartKey,omitempty"`
	EndKey   []byte `protobuf:"bytes,3,opt,name=EndKey,proto3" json:"EndKey,omitempty"`
}

func (m *TableSpan) Reset()         { *m = TableSpan{} }
func (m *TableSpan) String() string { return proto.CompactTextString(m) }
func (*TableSpan) ProtoMessage()    {}
func (*TableSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}
func (m *TableSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpan.Merge(m, src)
}
func (m *TableSpan) XXX_Size() int {
	return m.Size()
}
func (m *TableSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpan.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpan proto.InternalMessageInfo

func (m *TableSpan) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableSpan) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *TableSpan) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type HeartBeatRequest struct {
	ChangefeedID    *ChangefeedID      `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Watermark       *Watermark         `protobuf:"bytes,2,opt,name=watermark,proto3" json:"watermark,omitempty"`
	Statuses        []*TableSpanStatus `protobuf:"bytes,3,rep,name=statuses,proto3" json:"statuses,omitempty"`
	CompeleteStatus bool               `protobuf:"varint,4,opt,name=compeleteStatus,proto3" json:"compeleteStatus,omitempty"`
	Err             *RunningError      `protobuf:"bytes,5,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *HeartBeatRequest) Reset()         { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()    {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{1}
}
func (m *HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest.Merge(m, src)
}
func (m *HeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest proto.InternalMessageInfo

func (m *HeartBeatRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *HeartBeatRequest) GetWatermark() *Watermark {
	if m != nil {
		return m.Watermark
	}
	return nil
}

func (m *HeartBeatRequest) GetStatuses() []*TableSpanStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *HeartBeatRequest) GetCompeleteStatus() bool {
	if m != nil {
		return m.CompeleteStatus
	}
	return false
}

func (m *HeartBeatRequest) GetErr() *RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

type Watermark struct {
	CheckpointTs uint64 `protobuf:"varint,1,opt,name=checkpointTs,proto3" json:"checkpointTs,omitempty"`
	ResolvedTs   uint64 `protobuf:"varint,2,opt,name=resolvedTs,proto3" json:"resolvedTs,omitempty"`
	Seq          uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *Watermark) Reset()         { *m = Watermark{} }
func (m *Watermark) String() string { return proto.CompactTextString(m) }
func (*Watermark) ProtoMessage()    {}
func (*Watermark) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{2}
}
func (m *Watermark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Watermark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Watermark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Watermark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watermark.Merge(m, src)
}
func (m *Watermark) XXX_Size() int {
	return m.Size()
}
func (m *Watermark) XXX_DiscardUnknown() {
	xxx_messageInfo_Watermark.DiscardUnknown(m)
}

var xxx_messageInfo_Watermark proto.InternalMessageInfo

func (m *Watermark) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *Watermark) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

func (m *Watermark) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type DispatcherAction struct {
	Action      Action `protobuf:"varint,1,opt,name=action,proto3,enum=heartbeatpb.Action" json:"action,omitempty"`
	CommitTs    uint64 `protobuf:"varint,2,opt,name=CommitTs,proto3" json:"CommitTs,omitempty"`
	IsSyncPoint bool   `protobuf:"varint,3,opt,name=IsSyncPoint,proto3" json:"IsSyncPoint,omitempty"`
}

func (m *DispatcherAction) Reset()         { *m = DispatcherAction{} }
func (m *DispatcherAction) String() string { return proto.CompactTextString(m) }
func (*DispatcherAction) ProtoMessage()    {}
func (*DispatcherAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{3}
}
func (m *DispatcherAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherAction.Merge(m, src)
}
func (m *DispatcherAction) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherAction.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherAction proto.InternalMessageInfo

func (m *DispatcherAction) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_Write
}

func (m *DispatcherAction) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *DispatcherAction) GetIsSyncPoint() bool {
	if m != nil {
		return m.IsSyncPoint
	}
	return false
}

type ACK struct {
	CommitTs    uint64 `protobuf:"varint,1,opt,name=CommitTs,proto3" json:"CommitTs,omitempty"`
	IsSyncPoint bool   `protobuf:"varint,2,opt,name=IsSyncPoint,proto3" json:"IsSyncPoint,omitempty"`
}

func (m *ACK) Reset()         { *m = ACK{} }
func (m *ACK) String() string { return proto.CompactTextString(m) }
func (*ACK) ProtoMessage()    {}
func (*ACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{4}
}
func (m *ACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACK.Merge(m, src)
}
func (m *ACK) XXX_Size() int {
	return m.Size()
}
func (m *ACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ACK.DiscardUnknown(m)
}

var xxx_messageInfo_ACK proto.InternalMessageInfo

func (m *ACK) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *ACK) GetIsSyncPoint() bool {
	if m != nil {
		return m.IsSyncPoint
	}
	return false
}

type InfluencedDispatchers struct {
	InfluenceType InfluenceType `protobuf:"varint,1,opt,name=InfluenceType,proto3,enum=heartbeatpb.InfluenceType" json:"InfluenceType,omitempty"`
	// only exist when type is normal
	DispatcherIDs []*DispatcherID `protobuf:"bytes,2,rep,name=DispatcherIDs,proto3" json:"DispatcherIDs,omitempty"`
	// only exist when type is DB.
	SchemaID int64 `protobuf:"varint,3,opt,name=SchemaID,proto3" json:"SchemaID,omitempty"`
	// only exist when type is all or db, and in heartbeat response.
	ExcludeDispatcherId *DispatcherID `protobuf:"bytes,4,opt,name=excludeDispatcherId,proto3" json:"excludeDispatcherId,omitempty"`
}

func (m *InfluencedDispatchers) Reset()         { *m = InfluencedDispatchers{} }
func (m *InfluencedDispatchers) String() string { return proto.CompactTextString(m) }
func (*InfluencedDispatchers) ProtoMessage()    {}
func (*InfluencedDispatchers) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{5}
}
func (m *InfluencedDispatchers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfluencedDispatchers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfluencedDispatchers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfluencedDispatchers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfluencedDispatchers.Merge(m, src)
}
func (m *InfluencedDispatchers) XXX_Size() int {
	return m.Size()
}
func (m *InfluencedDispatchers) XXX_DiscardUnknown() {
	xxx_messageInfo_InfluencedDispatchers.DiscardUnknown(m)
}

var xxx_messageInfo_InfluencedDispatchers proto.InternalMessageInfo

func (m *InfluencedDispatchers) GetInfluenceType() InfluenceType {
	if m != nil {
		return m.InfluenceType
	}
	return InfluenceType_All
}

func (m *InfluencedDispatchers) GetDispatcherIDs() []*DispatcherID {
	if m != nil {
		return m.DispatcherIDs
	}
	return nil
}

func (m *InfluencedDispatchers) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

func (m *InfluencedDispatchers) GetExcludeDispatcherId() *DispatcherID {
	if m != nil {
		return m.ExcludeDispatcherId
	}
	return nil
}

type DispatcherStatus struct {
	InfluencedDispatchers *InfluencedDispatchers `protobuf:"bytes,1,opt,name=influencedDispatchers,proto3" json:"influencedDispatchers,omitempty"`
	Action                *DispatcherAction      `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Ack                   *ACK                   `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *DispatcherStatus) Reset()         { *m = DispatcherStatus{} }
func (m *DispatcherStatus) String() string { return proto.CompactTextString(m) }
func (*DispatcherStatus) ProtoMessage()    {}
func (*DispatcherStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{6}
}
func (m *DispatcherStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherStatus.Merge(m, src)
}
func (m *DispatcherStatus) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherStatus proto.InternalMessageInfo

func (m *DispatcherStatus) GetInfluencedDispatchers() *InfluencedDispatchers {
	if m != nil {
		return m.InfluencedDispatchers
	}
	return nil
}

func (m *DispatcherStatus) GetAction() *DispatcherAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *DispatcherStatus) GetAck() *ACK {
	if m != nil {
		return m.Ack
	}
	return nil
}

type HeartBeatResponse struct {
	ChangefeedID       *ChangefeedID       `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	DispatcherStatuses []*DispatcherStatus `protobuf:"bytes,2,rep,name=dispatcherStatuses,proto3" json:"dispatcherStatuses,omitempty"`
}

func (m *HeartBeatResponse) Reset()         { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()    {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{7}
}
func (m *HeartBeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatResponse.Merge(m, src)
}
func (m *HeartBeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatResponse proto.InternalMessageInfo

func (m *HeartBeatResponse) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *HeartBeatResponse) GetDispatcherStatuses() []*DispatcherStatus {
	if m != nil {
		return m.DispatcherStatuses
	}
	return nil
}

type CheckpointTsMessage struct {
	ChangefeedID *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	CheckpointTs uint64        `protobuf:"varint,2,opt,name=checkpointTs,proto3" json:"checkpointTs,omitempty"`
}

func (m *CheckpointTsMessage) Reset()         { *m = CheckpointTsMessage{} }
func (m *CheckpointTsMessage) String() string { return proto.CompactTextString(m) }
func (*CheckpointTsMessage) ProtoMessage()    {}
func (*CheckpointTsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{8}
}
func (m *CheckpointTsMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointTsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointTsMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointTsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointTsMessage.Merge(m, src)
}
func (m *CheckpointTsMessage) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointTsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointTsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointTsMessage proto.InternalMessageInfo

func (m *CheckpointTsMessage) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *CheckpointTsMessage) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

type DispatcherConfig struct {
	Span         *TableSpan    `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	StartTs      uint64        `protobuf:"varint,2,opt,name=startTs,proto3" json:"startTs,omitempty"`
	DispatcherID *DispatcherID `protobuf:"bytes,3,opt,name=dispatcherID,proto3" json:"dispatcherID,omitempty"`
	SchemaID     int64         `protobuf:"varint,4,opt,name=schemaID,proto3" json:"schemaID,omitempty"`
	// it's the pd time when scheduling the dispatcher, for MySQL sink event before this tso should use replace mode
	CurrentPdTs uint64 `protobuf:"varint,5,opt,name=current_pd_ts,json=currentPdTs,proto3" json:"current_pd_ts,omitempty"`
}

func (m *DispatcherConfig) Reset()         { *m = DispatcherConfig{} }
func (m *DispatcherConfig) String() string { return proto.CompactTextString(m) }
func (*DispatcherConfig) ProtoMessage()    {}
func (*DispatcherConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{9}
}
func (m *DispatcherConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherConfig.Merge(m, src)
}
func (m *DispatcherConfig) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherConfig proto.InternalMessageInfo

func (m *DispatcherConfig) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *DispatcherConfig) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *DispatcherConfig) GetDispatcherID() *DispatcherID {
	if m != nil {
		return m.DispatcherID
	}
	return nil
}

func (m *DispatcherConfig) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

func (m *DispatcherConfig) GetCurrentPdTs() uint64 {
	if m != nil {
		return m.CurrentPdTs
	}
	return 0
}

type ScheduleDispatcherRequest struct {
	ChangefeedID   *ChangefeedID     `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Config         *DispatcherConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ScheduleAction ScheduleAction    `protobuf:"varint,3,opt,name=scheduleAction,proto3,enum=heartbeatpb.ScheduleAction" json:"scheduleAction,omitempty"`
}

func (m *ScheduleDispatcherRequest) Reset()         { *m = ScheduleDispatcherRequest{} }
func (m *ScheduleDispatcherRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleDispatcherRequest) ProtoMessage()    {}
func (*ScheduleDispatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{10}
}
func (m *ScheduleDispatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleDispatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleDispatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleDispatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleDispatcherRequest.Merge(m, src)
}
func (m *ScheduleDispatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleDispatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleDispatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleDispatcherRequest proto.InternalMessageInfo

func (m *ScheduleDispatcherRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *ScheduleDispatcherRequest) GetConfig() *DispatcherConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ScheduleDispatcherRequest) GetScheduleAction() ScheduleAction {
	if m != nil {
		return m.ScheduleAction
	}
	return ScheduleAction_Create
}

type MaintainerHeartbeat struct {
	Statuses []*MaintainerStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *MaintainerHeartbeat) Reset()         { *m = MaintainerHeartbeat{} }
func (m *MaintainerHeartbeat) String() string { return proto.CompactTextString(m) }
func (*MaintainerHeartbeat) ProtoMessage()    {}
func (*MaintainerHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{11}
}
func (m *MaintainerHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerHeartbeat.Merge(m, src)
}
func (m *MaintainerHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerHeartbeat proto.InternalMessageInfo

func (m *MaintainerHeartbeat) GetStatuses() []*MaintainerStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type MaintainerStatus struct {
	ChangefeedID *ChangefeedID   `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	FeedState    string          `protobuf:"bytes,2,opt,name=feed_state,json=feedState,proto3" json:"feed_state,omitempty"`
	State        ComponentState  `protobuf:"varint,3,opt,name=state,proto3,enum=heartbeatpb.ComponentState" json:"state,omitempty"`
	CheckpointTs uint64          `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	Err          []*RunningError `protobuf:"bytes,5,rep,name=err,proto3" json:"err,omitempty"`
}

func (m *MaintainerStatus) Reset()         { *m = MaintainerStatus{} }
func (m *MaintainerStatus) String() string { return proto.CompactTextString(m) }
func (*MaintainerStatus) ProtoMessage()    {}
func (*MaintainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{12}
}
func (m *MaintainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerStatus.Merge(m, src)
}
func (m *MaintainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerStatus proto.InternalMessageInfo

func (m *MaintainerStatus) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerStatus) GetFeedState() string {
	if m != nil {
		return m.FeedState
	}
	return ""
}

func (m *MaintainerStatus) GetState() ComponentState {
	if m != nil {
		return m.State
	}
	return ComponentState_Working
}

func (m *MaintainerStatus) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *MaintainerStatus) GetErr() []*RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

type CoordinatorBootstrapRequest struct {
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *CoordinatorBootstrapRequest) Reset()         { *m = CoordinatorBootstrapRequest{} }
func (m *CoordinatorBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*CoordinatorBootstrapRequest) ProtoMessage()    {}
func (*CoordinatorBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{13}
}
func (m *CoordinatorBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorBootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorBootstrapRequest.Merge(m, src)
}
func (m *CoordinatorBootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorBootstrapRequest proto.InternalMessageInfo

func (m *CoordinatorBootstrapRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CoordinatorBootstrapResponse struct {
	Statuses []*MaintainerStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *CoordinatorBootstrapResponse) Reset()         { *m = CoordinatorBootstrapResponse{} }
func (m *CoordinatorBootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*CoordinatorBootstrapResponse) ProtoMessage()    {}
func (*CoordinatorBootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{14}
}
func (m *CoordinatorBootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorBootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorBootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorBootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorBootstrapResponse.Merge(m, src)
}
func (m *CoordinatorBootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorBootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorBootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorBootstrapResponse proto.InternalMessageInfo

func (m *CoordinatorBootstrapResponse) GetStatuses() []*MaintainerStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type AddMaintainerRequest struct {
	Id           *ChangefeedID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config       []byte        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	CheckpointTs uint64        `protobuf:"varint,3,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
}

func (m *AddMaintainerRequest) Reset()         { *m = AddMaintainerRequest{} }
func (m *AddMaintainerRequest) String() string { return proto.CompactTextString(m) }
func (*AddMaintainerRequest) ProtoMessage()    {}
func (*AddMaintainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{15}
}
func (m *AddMaintainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMaintainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMaintainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMaintainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMaintainerRequest.Merge(m, src)
}
func (m *AddMaintainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddMaintainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMaintainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMaintainerRequest proto.InternalMessageInfo

func (m *AddMaintainerRequest) GetId() *ChangefeedID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AddMaintainerRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AddMaintainerRequest) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

type RemoveMaintainerRequest struct {
	Id      *ChangefeedID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cascade bool          `protobuf:"varint,2,opt,name=cascade,proto3" json:"cascade,omitempty"`
	Removed bool          `protobuf:"varint,3,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (m *RemoveMaintainerRequest) Reset()         { *m = RemoveMaintainerRequest{} }
func (m *RemoveMaintainerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveMaintainerRequest) ProtoMessage()    {}
func (*RemoveMaintainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{16}
}
func (m *RemoveMaintainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMaintainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMaintainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMaintainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMaintainerRequest.Merge(m, src)
}
func (m *RemoveMaintainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMaintainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMaintainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMaintainerRequest proto.InternalMessageInfo

func (m *RemoveMaintainerRequest) GetId() *ChangefeedID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RemoveMaintainerRequest) GetCascade() bool {
	if m != nil {
		return m.Cascade
	}
	return false
}

func (m *RemoveMaintainerRequest) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

type MaintainerBootstrapRequest struct {
	ChangefeedID                  *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Config                        []byte        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	StartTs                       uint64        `protobuf:"varint,3,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	TableTriggerEventDispatcherId *DispatcherID `protobuf:"bytes,4,opt,name=table_trigger_event_dispatcher_id,json=tableTriggerEventDispatcherId,proto3" json:"table_trigger_event_dispatcher_id,omitempty"`
}

func (m *MaintainerBootstrapRequest) Reset()         { *m = MaintainerBootstrapRequest{} }
func (m *MaintainerBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*MaintainerBootstrapRequest) ProtoMessage()    {}
func (*MaintainerBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{17}
}
func (m *MaintainerBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerBootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerBootstrapRequest.Merge(m, src)
}
func (m *MaintainerBootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerBootstrapRequest proto.InternalMessageInfo

func (m *MaintainerBootstrapRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerBootstrapRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *MaintainerBootstrapRequest) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *MaintainerBootstrapRequest) GetTableTriggerEventDispatcherId() *DispatcherID {
	if m != nil {
		return m.TableTriggerEventDispatcherId
	}
	return nil
}

type MaintainerBootstrapResponse struct {
	ChangefeedID *ChangefeedID         `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Spans        []*BootstrapTableSpan `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	Err          *RunningError         `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	// when the table trigger event dispatcher is created in this node,
	// we need to return the checkpointTs(startTs) of the table trigger event dispatcher
	// This checkpointTs will be the ts to check schema store to get table lists when maintainer is restarted.
	// Because table trigger event dispatcher participates all create/delete tables ddls,
	// so we need to align the table list with the progress of table trigger event dispatcher
	// when it is restarted to keep correctness.
	// If the table trigger event dispatcher is not created in this node, we can return 0 as the checkpointTs.
	CheckpointTs uint64 `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
}

func (m *MaintainerBootstrapResponse) Reset()         { *m = MaintainerBootstrapResponse{} }
func (m *MaintainerBootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*MaintainerBootstrapResponse) ProtoMessage()    {}
func (*MaintainerBootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{18}
}
func (m *MaintainerBootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerBootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerBootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerBootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerBootstrapResponse.Merge(m, src)
}
func (m *MaintainerBootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerBootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerBootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerBootstrapResponse proto.InternalMessageInfo

func (m *MaintainerBootstrapResponse) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerBootstrapResponse) GetSpans() []*BootstrapTableSpan {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *MaintainerBootstrapResponse) GetErr() *RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *MaintainerBootstrapResponse) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

type MaintainerPostBootstrapRequest struct {
	ChangefeedID                  *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	TableTriggerEventDispatcherId *DispatcherID `protobuf:"bytes,2,opt,name=table_trigger_event_dispatcher_id,json=tableTriggerEventDispatcherId,proto3" json:"table_trigger_event_dispatcher_id,omitempty"`
	Schemas                       []*SchemaInfo `protobuf:"bytes,3,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (m *MaintainerPostBootstrapRequest) Reset()         { *m = MaintainerPostBootstrapRequest{} }
func (m *MaintainerPostBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*MaintainerPostBootstrapRequest) ProtoMessage()    {}
func (*MaintainerPostBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{19}
}
func (m *MaintainerPostBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerPostBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerPostBootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerPostBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerPostBootstrapRequest.Merge(m, src)
}
func (m *MaintainerPostBootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerPostBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerPostBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerPostBootstrapRequest proto.InternalMessageInfo

func (m *MaintainerPostBootstrapRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerPostBootstrapRequest) GetTableTriggerEventDispatcherId() *DispatcherID {
	if m != nil {
		return m.TableTriggerEventDispatcherId
	}
	return nil
}

func (m *MaintainerPostBootstrapRequest) GetSchemas() []*SchemaInfo {
	if m != nil {
		return m.Schemas
	}
	return nil
}

type MaintainerPostBootstrapResponse struct {
	ChangefeedID                  *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	TableTriggerEventDispatcherId *DispatcherID `protobuf:"bytes,2,opt,name=table_trigger_event_dispatcher_id,json=tableTriggerEventDispatcherId,proto3" json:"table_trigger_event_dispatcher_id,omitempty"`
	Err                           *RunningError `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *MaintainerPostBootstrapResponse) Reset()         { *m = MaintainerPostBootstrapResponse{} }
func (m *MaintainerPostBootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*MaintainerPostBootstrapResponse) ProtoMessage()    {}
func (*MaintainerPostBootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{20}
}
func (m *MaintainerPostBootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerPostBootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerPostBootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerPostBootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerPostBootstrapResponse.Merge(m, src)
}
func (m *MaintainerPostBootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerPostBootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerPostBootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerPostBootstrapResponse proto.InternalMessageInfo

func (m *MaintainerPostBootstrapResponse) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerPostBootstrapResponse) GetTableTriggerEventDispatcherId() *DispatcherID {
	if m != nil {
		return m.TableTriggerEventDispatcherId
	}
	return nil
}

func (m *MaintainerPostBootstrapResponse) GetErr() *RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

type SchemaInfo struct {
	SchemaID   int64        `protobuf:"varint,1,opt,name=SchemaID,proto3" json:"SchemaID,omitempty"`
	SchemaName string       `protobuf:"bytes,2,opt,name=SchemaName,proto3" json:"SchemaName,omitempty"`
	Tables     []*TableInfo `protobuf:"bytes,3,rep,name=Tables,proto3" json:"Tables,omitempty"`
}

func (m *SchemaInfo) Reset()         { *m = SchemaInfo{} }
func (m *SchemaInfo) String() string { return proto.CompactTextString(m) }
func (*SchemaInfo) ProtoMessage()    {}
func (*SchemaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{21}
}
func (m *SchemaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaInfo.Merge(m, src)
}
func (m *SchemaInfo) XXX_Size() int {
	return m.Size()
}
func (m *SchemaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaInfo proto.InternalMessageInfo

func (m *SchemaInfo) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

func (m *SchemaInfo) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *SchemaInfo) GetTables() []*TableInfo {
	if m != nil {
		return m.Tables
	}
	return nil
}

type TableInfo struct {
	TableID   int64  `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=TableName,proto3" json:"TableName,omitempty"`
}

func (m *TableInfo) Reset()         { *m = TableInfo{} }
func (m *TableInfo) String() string { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()    {}
func (*TableInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{22}
}
func (m *TableInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableInfo.Merge(m, src)
}
func (m *TableInfo) XXX_Size() int {
	return m.Size()
}
func (m *TableInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TableInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TableInfo proto.InternalMessageInfo

func (m *TableInfo) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableInfo) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type BootstrapTableSpan struct {
	ID              *DispatcherID  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SchemaID        int64          `protobuf:"varint,2,opt,name=SchemaID,proto3" json:"SchemaID,omitempty"`
	Span            *TableSpan     `protobuf:"bytes,3,opt,name=span,proto3" json:"span,omitempty"`
	ComponentStatus ComponentState `protobuf:"varint,4,opt,name=component_status,json=componentStatus,proto3,enum=heartbeatpb.ComponentState" json:"component_status,omitempty"`
	CheckpointTs    uint64         `protobuf:"varint,5,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	BlockState      *State         `protobuf:"bytes,6,opt,name=block_state,json=blockState,proto3" json:"block_state,omitempty"`
}

func (m *BootstrapTableSpan) Reset()         { *m = BootstrapTableSpan{} }
func (m *BootstrapTableSpan) String() string { return proto.CompactTextString(m) }
func (*BootstrapTableSpan) ProtoMessage()    {}
func (*BootstrapTableSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{23}
}
func (m *BootstrapTableSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapTableSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapTableSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapTableSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapTableSpan.Merge(m, src)
}
func (m *BootstrapTableSpan) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapTableSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapTableSpan.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapTableSpan proto.InternalMessageInfo

func (m *BootstrapTableSpan) GetID() *DispatcherID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *BootstrapTableSpan) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

func (m *BootstrapTableSpan) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *BootstrapTableSpan) GetComponentStatus() ComponentState {
	if m != nil {
		return m.ComponentStatus
	}
	return ComponentState_Working
}

func (m *BootstrapTableSpan) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *BootstrapTableSpan) GetBlockState() *State {
	if m != nil {
		return m.BlockState
	}
	return nil
}

type MaintainerCloseRequest struct {
	ChangefeedID *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	// true when remove changefeed, false when pause the changefeed.
	Removed bool `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (m *MaintainerCloseRequest) Reset()         { *m = MaintainerCloseRequest{} }
func (m *MaintainerCloseRequest) String() string { return proto.CompactTextString(m) }
func (*MaintainerCloseRequest) ProtoMessage()    {}
func (*MaintainerCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{24}
}
func (m *MaintainerCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerCloseRequest.Merge(m, src)
}
func (m *MaintainerCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerCloseRequest proto.InternalMessageInfo

func (m *MaintainerCloseRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerCloseRequest) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

type MaintainerCloseResponse struct {
	ChangefeedID *ChangefeedID `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Success      bool          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MaintainerCloseResponse) Reset()         { *m = MaintainerCloseResponse{} }
func (m *MaintainerCloseResponse) String() string { return proto.CompactTextString(m) }
func (*MaintainerCloseResponse) ProtoMessage()    {}
func (*MaintainerCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{25}
}
func (m *MaintainerCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerCloseResponse.Merge(m, src)
}
func (m *MaintainerCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerCloseResponse proto.InternalMessageInfo

func (m *MaintainerCloseResponse) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *MaintainerCloseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type InfluencedTables struct {
	InfluenceType InfluenceType `protobuf:"varint,1,opt,name=InfluenceType,proto3,enum=heartbeatpb.InfluenceType" json:"InfluenceType,omitempty"`
	// only exist when type is normal
	TableIDs []int64 `protobuf:"varint,2,rep,packed,name=TableIDs,proto3" json:"TableIDs,omitempty"`
	// only exist when type is DB.
	SchemaID int64 `protobuf:"varint,3,opt,name=SchemaID,proto3" json:"SchemaID,omitempty"`
}

func (m *InfluencedTables) Reset()         { *m = InfluencedTables{} }
func (m *InfluencedTables) String() string { return proto.CompactTextString(m) }
func (*InfluencedTables) ProtoMessage()    {}
func (*InfluencedTables) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{26}
}
func (m *InfluencedTables) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfluencedTables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfluencedTables.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfluencedTables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfluencedTables.Merge(m, src)
}
func (m *InfluencedTables) XXX_Size() int {
	return m.Size()
}
func (m *InfluencedTables) XXX_DiscardUnknown() {
	xxx_messageInfo_InfluencedTables.DiscardUnknown(m)
}

var xxx_messageInfo_InfluencedTables proto.InternalMessageInfo

func (m *InfluencedTables) GetInfluenceType() InfluenceType {
	if m != nil {
		return m.InfluenceType
	}
	return InfluenceType_All
}

func (m *InfluencedTables) GetTableIDs() []int64 {
	if m != nil {
		return m.TableIDs
	}
	return nil
}

func (m *InfluencedTables) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

type Table struct {
	TableID  int64 `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	SchemaID int64 `protobuf:"varint,2,opt,name=SchemaID,proto3" json:"SchemaID,omitempty"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{27}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *Table) GetSchemaID() int64 {
	if m != nil {
		return m.SchemaID
	}
	return 0
}

type SchemaIDChange struct {
	TableID     int64 `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	OldSchemaID int64 `protobuf:"varint,2,opt,name=OldSchemaID,proto3" json:"OldSchemaID,omitempty"`
	NewSchemaID int64 `protobuf:"varint,3,opt,name=NewSchemaID,proto3" json:"NewSchemaID,omitempty"`
}

func (m *SchemaIDChange) Reset()         { *m = SchemaIDChange{} }
func (m *SchemaIDChange) String() string { return proto.CompactTextString(m) }
func (*SchemaIDChange) ProtoMessage()    {}
func (*SchemaIDChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{28}
}
func (m *SchemaIDChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaIDChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaIDChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaIDChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaIDChange.Merge(m, src)
}
func (m *SchemaIDChange) XXX_Size() int {
	return m.Size()
}
func (m *SchemaIDChange) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaIDChange.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaIDChange proto.InternalMessageInfo

func (m *SchemaIDChange) GetTableID() int64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *SchemaIDChange) GetOldSchemaID() int64 {
	if m != nil {
		return m.OldSchemaID
	}
	return 0
}

func (m *SchemaIDChange) GetNewSchemaID() int64 {
	if m != nil {
		return m.NewSchemaID
	}
	return 0
}

type State struct {
	IsBlocked         bool              `protobuf:"varint,1,opt,name=IsBlocked,proto3" json:"IsBlocked,omitempty"`
	BlockTs           uint64            `protobuf:"varint,2,opt,name=BlockTs,proto3" json:"BlockTs,omitempty"`
	BlockTables       *InfluencedTables `protobuf:"bytes,3,opt,name=BlockTables,proto3" json:"BlockTables,omitempty"`
	NeedDroppedTables *InfluencedTables `protobuf:"bytes,4,opt,name=NeedDroppedTables,proto3" json:"NeedDroppedTables,omitempty"`
	NeedAddedTables   []*Table          `protobuf:"bytes,5,rep,name=NeedAddedTables,proto3" json:"NeedAddedTables,omitempty"`
	UpdatedSchemas    []*SchemaIDChange `protobuf:"bytes,6,rep,name=UpdatedSchemas,proto3" json:"UpdatedSchemas,omitempty"`
	IsSyncPoint       bool              `protobuf:"varint,7,opt,name=IsSyncPoint,proto3" json:"IsSyncPoint,omitempty"`
	Stage             BlockStage        `protobuf:"varint,8,opt,name=stage,proto3,enum=heartbeatpb.BlockStage" json:"stage,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{29}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *State) GetBlockTs() uint64 {
	if m != nil {
		return m.BlockTs
	}
	return 0
}

func (m *State) GetBlockTables() *InfluencedTables {
	if m != nil {
		return m.BlockTables
	}
	return nil
}

func (m *State) GetNeedDroppedTables() *InfluencedTables {
	if m != nil {
		return m.NeedDroppedTables
	}
	return nil
}

func (m *State) GetNeedAddedTables() []*Table {
	if m != nil {
		return m.NeedAddedTables
	}
	return nil
}

func (m *State) GetUpdatedSchemas() []*SchemaIDChange {
	if m != nil {
		return m.UpdatedSchemas
	}
	return nil
}

func (m *State) GetIsSyncPoint() bool {
	if m != nil {
		return m.IsSyncPoint
	}
	return false
}

func (m *State) GetStage() BlockStage {
	if m != nil {
		return m.Stage
	}
	return BlockStage_NONE
}

type TableSpanBlockStatus struct {
	ID    *DispatcherID `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State *State        `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *TableSpanBlockStatus) Reset()         { *m = TableSpanBlockStatus{} }
func (m *TableSpanBlockStatus) String() string { return proto.CompactTextString(m) }
func (*TableSpanBlockStatus) ProtoMessage()    {}
func (*TableSpanBlockStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{30}
}
func (m *TableSpanBlockStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpanBlockStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpanBlockStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpanBlockStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpanBlockStatus.Merge(m, src)
}
func (m *TableSpanBlockStatus) XXX_Size() int {
	return m.Size()
}
func (m *TableSpanBlockStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpanBlockStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpanBlockStatus proto.InternalMessageInfo

func (m *TableSpanBlockStatus) GetID() *DispatcherID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *TableSpanBlockStatus) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type TableSpanStatus struct {
	ID                 *DispatcherID  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ComponentStatus    ComponentState `protobuf:"varint,2,opt,name=component_status,json=componentStatus,proto3,enum=heartbeatpb.ComponentState" json:"component_status,omitempty"`
	CheckpointTs       uint64         `protobuf:"varint,3,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	EventSizePerSecond float32        `protobuf:"fixed32,4,opt,name=event_size_per_second,json=eventSizePerSecond,proto3" json:"event_size_per_second,omitempty"`
}

func (m *TableSpanStatus) Reset()         { *m = TableSpanStatus{} }
func (m *TableSpanStatus) String() string { return proto.CompactTextString(m) }
func (*TableSpanStatus) ProtoMessage()    {}
func (*TableSpanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{31}
}
func (m *TableSpanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpanStatus.Merge(m, src)
}
func (m *TableSpanStatus) XXX_Size() int {
	return m.Size()
}
func (m *TableSpanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpanStatus proto.InternalMessageInfo

func (m *TableSpanStatus) GetID() *DispatcherID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *TableSpanStatus) GetComponentStatus() ComponentState {
	if m != nil {
		return m.ComponentStatus
	}
	return ComponentState_Working
}

func (m *TableSpanStatus) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *TableSpanStatus) GetEventSizePerSecond() float32 {
	if m != nil {
		return m.EventSizePerSecond
	}
	return 0
}

type BlockStatusRequest struct {
	ChangefeedID  *ChangefeedID           `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	BlockStatuses []*TableSpanBlockStatus `protobuf:"bytes,2,rep,name=blockStatuses,proto3" json:"blockStatuses,omitempty"`
}

func (m *BlockStatusRequest) Reset()         { *m = BlockStatusRequest{} }
func (m *BlockStatusRequest) String() string { return proto.CompactTextString(m) }
func (*BlockStatusRequest) ProtoMessage()    {}
func (*BlockStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{32}
}
func (m *BlockStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockStatusRequest.Merge(m, src)
}
func (m *BlockStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockStatusRequest proto.InternalMessageInfo

func (m *BlockStatusRequest) GetChangefeedID() *ChangefeedID {
	if m != nil {
		return m.ChangefeedID
	}
	return nil
}

func (m *BlockStatusRequest) GetBlockStatuses() []*TableSpanBlockStatus {
	if m != nil {
		return m.BlockStatuses
	}
	return nil
}

type RunningError struct {
	Time    string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RunningError) Reset()         { *m = RunningError{} }
func (m *RunningError) String() string { return proto.CompactTextString(m) }
func (*RunningError) ProtoMessage()    {}
func (*RunningError) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{33}
}
func (m *RunningError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningError.Merge(m, src)
}
func (m *RunningError) XXX_Size() int {
	return m.Size()
}
func (m *RunningError) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningError.DiscardUnknown(m)
}

var xxx_messageInfo_RunningError proto.InternalMessageInfo

func (m *RunningError) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RunningError) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *RunningError) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RunningError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DispatcherID struct {
	High uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (m *DispatcherID) Reset()         { *m = DispatcherID{} }
func (m *DispatcherID) String() string { return proto.CompactTextString(m) }
func (*DispatcherID) ProtoMessage()    {}
func (*DispatcherID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{34}
}
func (m *DispatcherID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherID.Merge(m, src)
}
func (m *DispatcherID) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherID) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherID.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherID proto.InternalMessageInfo

func (m *DispatcherID) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *DispatcherID) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

type ChangefeedID struct {
	High      uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low       uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ChangefeedID) Reset()         { *m = ChangefeedID{} }
func (m *ChangefeedID) String() string { return proto.CompactTextString(m) }
func (*ChangefeedID) ProtoMessage()    {}
func (*ChangefeedID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{35}
}
func (m *ChangefeedID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangefeedID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangefeedID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangefeedID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangefeedID.Merge(m, src)
}
func (m *ChangefeedID) XXX_Size() int {
	return m.Size()
}
func (m *ChangefeedID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangefeedID.DiscardUnknown(m)
}

var xxx_messageInfo_ChangefeedID proto.InternalMessageInfo

func (m *ChangefeedID) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *ChangefeedID) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *ChangefeedID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChangefeedID) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterEnum("heartbeatpb.Action", Action_name, Action_value)
	proto.RegisterEnum("heartbeatpb.ScheduleAction", ScheduleAction_name, ScheduleAction_value)
	proto.RegisterEnum("heartbeatpb.BlockStage", BlockStage_name, BlockStage_value)
	proto.RegisterEnum("heartbeatpb.InfluenceType", InfluenceType_name, InfluenceType_value)
	proto.RegisterEnum("heartbeatpb.ComponentState", ComponentState_name, ComponentState_value)
	proto.RegisterType((*TableSpan)(nil), "heartbeatpb.TableSpan")
	proto.RegisterType((*HeartBeatRequest)(nil), "heartbeatpb.HeartBeatRequest")
	proto.RegisterType((*Watermark)(nil), "heartbeatpb.Watermark")
	proto.RegisterType((*DispatcherAction)(nil), "heartbeatpb.DispatcherAction")
	proto.RegisterType((*ACK)(nil), "heartbeatpb.ACK")
	proto.RegisterType((*InfluencedDispatchers)(nil), "heartbeatpb.InfluencedDispatchers")
	proto.RegisterType((*DispatcherStatus)(nil), "heartbeatpb.DispatcherStatus")
	proto.RegisterType((*HeartBeatResponse)(nil), "heartbeatpb.HeartBeatResponse")
	proto.RegisterType((*CheckpointTsMessage)(nil), "heartbeatpb.CheckpointTsMessage")
	proto.RegisterType((*DispatcherConfig)(nil), "heartbeatpb.DispatcherConfig")
	proto.RegisterType((*ScheduleDispatcherRequest)(nil), "heartbeatpb.ScheduleDispatcherRequest")
	proto.RegisterType((*MaintainerHeartbeat)(nil), "heartbeatpb.MaintainerHeartbeat")
	proto.RegisterType((*MaintainerStatus)(nil), "heartbeatpb.MaintainerStatus")
	proto.RegisterType((*CoordinatorBootstrapRequest)(nil), "heartbeatpb.CoordinatorBootstrapRequest")
	proto.RegisterType((*CoordinatorBootstrapResponse)(nil), "heartbeatpb.CoordinatorBootstrapResponse")
	proto.RegisterType((*AddMaintainerRequest)(nil), "heartbeatpb.AddMaintainerRequest")
	proto.RegisterType((*RemoveMaintainerRequest)(nil), "heartbeatpb.RemoveMaintainerRequest")
	proto.RegisterType((*MaintainerBootstrapRequest)(nil), "heartbeatpb.MaintainerBootstrapRequest")
	proto.RegisterType((*MaintainerBootstrapResponse)(nil), "heartbeatpb.MaintainerBootstrapResponse")
	proto.RegisterType((*MaintainerPostBootstrapRequest)(nil), "heartbeatpb.MaintainerPostBootstrapRequest")
	proto.RegisterType((*MaintainerPostBootstrapResponse)(nil), "heartbeatpb.MaintainerPostBootstrapResponse")
	proto.RegisterType((*SchemaInfo)(nil), "heartbeatpb.SchemaInfo")
	proto.RegisterType((*TableInfo)(nil), "heartbeatpb.TableInfo")
	proto.RegisterType((*BootstrapTableSpan)(nil), "heartbeatpb.BootstrapTableSpan")
	proto.RegisterType((*MaintainerCloseRequest)(nil), "heartbeatpb.MaintainerCloseRequest")
	proto.RegisterType((*MaintainerCloseResponse)(nil), "heartbeatpb.MaintainerCloseResponse")
	proto.RegisterType((*InfluencedTables)(nil), "heartbeatpb.InfluencedTables")
	proto.RegisterType((*Table)(nil), "heartbeatpb.Table")
	proto.RegisterType((*SchemaIDChange)(nil), "heartbeatpb.SchemaIDChange")
	proto.RegisterType((*State)(nil), "heartbeatpb.State")
	proto.RegisterType((*TableSpanBlockStatus)(nil), "heartbeatpb.TableSpanBlockStatus")
	proto.RegisterType((*TableSpanStatus)(nil), "heartbeatpb.TableSpanStatus")
	proto.RegisterType((*BlockStatusRequest)(nil), "heartbeatpb.BlockStatusRequest")
	proto.RegisterType((*RunningError)(nil), "heartbeatpb.RunningError")
	proto.RegisterType((*DispatcherID)(nil), "heartbeatpb.DispatcherID")
	proto.RegisterType((*ChangefeedID)(nil), "heartbeatpb.ChangefeedID")
}

func init() { proto.RegisterFile("heartbeatpb/heartbeat.proto", fileDescriptor_6d584080fdadb670) }

var fileDescriptor_6d584080fdadb670 = []byte{
	// 1790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x18, 0x4d, 0x73, 0xdb, 0x4c,
	0x39, 0x92, 0x1c, 0xc7, 0x7e, 0x9c, 0x0f, 0xbd, 0x9b, 0xb7, 0xa9, 0x9b, 0x0f, 0xbf, 0xe9, 0xc2,
	0x21, 0xa4, 0x90, 0x4c, 0xd3, 0x76, 0x0a, 0x0c, 0xa5, 0x24, 0x4e, 0x68, 0x3d, 0x99, 0xa6, 0x99,
	0x75, 0x98, 0x52, 0x2e, 0x1e, 0x45, 0xda, 0x38, 0x9a, 0xd8, 0x92, 0xaa, 0x95, 0xd3, 0xb4, 0x33,
	0x70, 0xe1, 0xca, 0x81, 0x23, 0x07, 0x2e, 0x3d, 0xf2, 0x4b, 0xe0, 0xd8, 0x13, 0x70, 0xe0, 0xc0,
	0xb4, 0xc3, 0x1f, 0x80, 0x61, 0xb8, 0x32, 0xbb, 0xd2, 0xea, 0xcb, 0x72, 0x92, 0x4e, 0x3c, 0xef,
	0x49, 0xfb, 0xec, 0x3e, 0x5f, 0xfb, 0x7c, 0xaf, 0x60, 0xe9, 0x94, 0x1a, 0x7e, 0x70, 0x4c, 0x8d,
	0xc0, 0x3b, 0xde, 0x8c, 0xd7, 0x1b, 0x9e, 0xef, 0x06, 0x2e, 0xaa, 0xa5, 0x0e, 0xf1, 0x6b, 0xa8,
	0x1e, 0x19, 0xc7, 0x3d, 0xda, 0xf6, 0x0c, 0x07, 0xd5, 0x61, 0x4a, 0x00, 0xad, 0xdd, 0xba, 0xb2,
	0xaa, 0xac, 0x69, 0x44, 0x82, 0x68, 0x11, 0x2a, 0xed, 0xc0, 0xf0, 0x83, 0x7d, 0xfa, 0xae, 0xae,
	0xae, 0x2a, 0x6b, 0xd3, 0x24, 0x86, 0xd1, 0x02, 0x94, 0xf7, 0x1c, 0x8b, 0x9f, 0x68, 0xe2, 0x24,
	0x82, 0xf0, 0x1f, 0x54, 0xd0, 0x9f, 0x73, 0x51, 0x3b, 0xd4, 0x08, 0x08, 0x7d, 0x33, 0xa0, 0x2c,
	0x40, 0x4f, 0x60, 0xda, 0x3c, 0x35, 0x9c, 0x2e, 0x3d, 0xa1, 0xd4, 0x8a, 0xe4, 0xd4, 0xb6, 0xee,
	0x6c, 0xa4, 0x74, 0xda, 0x68, 0xa6, 0x10, 0x48, 0x06, 0x1d, 0x3d, 0x84, 0xea, 0x5b, 0x23, 0xa0,
	0x7e, 0xdf, 0xf0, 0xcf, 0x84, 0x22, 0xb5, 0xad, 0x85, 0x0c, 0xed, 0x2b, 0x79, 0x4a, 0x12, 0x44,
	0xf4, 0x43, 0xa8, 0xb0, 0xc0, 0x08, 0x06, 0x8c, 0xb2, 0xba, 0xb6, 0xaa, 0xad, 0xd5, 0xb6, 0x96,
	0x33, 0x44, 0xb1, 0x05, 0xda, 0x02, 0x8b, 0xc4, 0xd8, 0x68, 0x0d, 0xe6, 0x4c, 0xb7, 0xef, 0xd1,
	0x1e, 0x0d, 0x68, 0x78, 0x58, 0x2f, 0xad, 0x2a, 0x6b, 0x15, 0x92, 0xdf, 0x46, 0xf7, 0x40, 0xa3,
	0xbe, 0x5f, 0x9f, 0x2c, 0xb8, 0x0f, 0x19, 0x38, 0x8e, 0xed, 0x74, 0xf7, 0x7c, 0xdf, 0xf5, 0x09,
	0xc7, 0xc2, 0x06, 0x54, 0x63, 0x45, 0x11, 0xe6, 0x26, 0xa1, 0xe6, 0x99, 0xe7, 0xda, 0x4e, 0x70,
	0xc4, 0x84, 0x49, 0x4a, 0x24, 0xb3, 0x87, 0x1a, 0x00, 0x3e, 0x65, 0x6e, 0xef, 0x9c, 0x5a, 0x47,
	0x4c, 0x5c, 0xbc, 0x44, 0x52, 0x3b, 0x48, 0x07, 0x8d, 0xd1, 0x37, 0xc2, 0x01, 0x25, 0xc2, 0x97,
	0xf8, 0xd7, 0xa0, 0xef, 0xda, 0xcc, 0x33, 0x02, 0xf3, 0x94, 0xfa, 0xdb, 0x66, 0x60, 0xbb, 0x0e,
	0xba, 0x07, 0x65, 0x43, 0xac, 0x84, 0x8c, 0xd9, 0xad, 0xf9, 0x8c, 0x9a, 0x21, 0x12, 0x89, 0x50,
	0xb8, 0xcb, 0x9b, 0x6e, 0xbf, 0x6f, 0x07, 0xb1, 0xc0, 0x18, 0x46, 0xab, 0x50, 0x6b, 0xb1, 0xf6,
	0x3b, 0xc7, 0x3c, 0xe4, 0xfa, 0x09, 0xb1, 0x15, 0x92, 0xde, 0xc2, 0x4d, 0xd0, 0xb6, 0x9b, 0xfb,
	0x19, 0x26, 0xca, 0xe5, 0x4c, 0xd4, 0x61, 0x26, 0xbf, 0x55, 0xe1, 0x56, 0xcb, 0x39, 0xe9, 0x0d,
	0xa8, 0x63, 0x52, 0x2b, 0xb9, 0x0e, 0x43, 0x3f, 0x83, 0x99, 0xf8, 0xe0, 0xe8, 0x9d, 0x47, 0xa3,
	0x0b, 0x2d, 0x66, 0x2e, 0x94, 0xc1, 0x20, 0x59, 0x02, 0xf4, 0x14, 0x66, 0x12, 0x86, 0xad, 0x5d,
	0x7e, 0x47, 0x6d, 0xc8, 0x73, 0x69, 0x0c, 0x92, 0xc5, 0x17, 0x29, 0x61, 0x9e, 0xd2, 0xbe, 0xd1,
	0xda, 0x15, 0x06, 0xd0, 0x48, 0x0c, 0xa3, 0x7d, 0x98, 0xa7, 0x17, 0x66, 0x6f, 0x60, 0xd1, 0x14,
	0x8d, 0x25, 0x42, 0xe7, 0x52, 0x11, 0x45, 0x54, 0xf8, 0xcf, 0x4a, 0xda, 0x95, 0x51, 0xb8, 0xfd,
	0x12, 0x6e, 0xd9, 0x45, 0x96, 0x89, 0x12, 0x0a, 0x17, 0x1b, 0x22, 0x8d, 0x49, 0x8a, 0x19, 0xa0,
	0x47, 0x71, 0x90, 0x84, 0xf9, 0xb5, 0x32, 0x42, 0xdd, 0x5c, 0xb8, 0x60, 0xd0, 0x0c, 0xf3, 0x4c,
	0x58, 0xa2, 0xb6, 0xa5, 0x67, 0x03, 0xab, 0xb9, 0x4f, 0xf8, 0x21, 0xfe, 0xa0, 0xc0, 0x57, 0xa9,
	0x8a, 0xc0, 0x3c, 0xd7, 0x61, 0xf4, 0xa6, 0x25, 0xe1, 0x05, 0x20, 0x2b, 0x67, 0x1d, 0x2a, 0xbd,
	0x39, 0x4a, 0xf7, 0x28, 0xcf, 0x0b, 0x08, 0xf1, 0x05, 0xcc, 0x37, 0x53, 0x99, 0xf7, 0x82, 0x32,
	0x66, 0x74, 0x6f, 0xac, 0x64, 0x3e, 0xc7, 0xd5, 0xe1, 0x1c, 0xc7, 0x7f, 0xcb, 0xf8, 0xb9, 0xe9,
	0x3a, 0x27, 0x76, 0x17, 0xad, 0x43, 0x89, 0x79, 0x86, 0x13, 0xc9, 0x5b, 0x28, 0x2e, 0x5b, 0x44,
	0xe0, 0xf0, 0xf2, 0xcd, 0x78, 0x51, 0x8e, 0xf9, 0x4b, 0x90, 0x6b, 0x6f, 0xa5, 0xe2, 0x2c, 0xf2,
	0xd2, 0x25, 0x81, 0x98, 0x41, 0xe7, 0xa1, 0xce, 0x64, 0xa8, 0x97, 0xc2, 0x50, 0x97, 0x30, 0xc2,
	0x30, 0x63, 0x0e, 0x7c, 0x9f, 0x3a, 0x41, 0xc7, 0xb3, 0x3a, 0x01, 0x13, 0x15, 0xb0, 0x44, 0x6a,
	0xd1, 0xe6, 0xa1, 0x75, 0xc4, 0xf0, 0x5f, 0x15, 0xb8, 0xc3, 0x73, 0xc3, 0x1a, 0xf4, 0x52, 0xa1,
	0x3d, 0xa6, 0x96, 0xf0, 0x08, 0xca, 0xa6, 0xb0, 0xd5, 0x15, 0xf1, 0x1a, 0x1a, 0x94, 0x44, 0xc8,
	0xa8, 0x09, 0xb3, 0x2c, 0x52, 0x29, 0x8c, 0x64, 0x61, 0x94, 0xd9, 0xad, 0xa5, 0x0c, 0x79, 0x3b,
	0x83, 0x42, 0x72, 0x24, 0xf8, 0x10, 0xe6, 0x5f, 0x18, 0xb6, 0x13, 0x18, 0xb6, 0x43, 0xfd, 0xe7,
	0x92, 0x0e, 0xfd, 0x28, 0xd5, 0x6f, 0x94, 0x82, 0x40, 0x4c, 0x68, 0xf2, 0x0d, 0x07, 0xff, 0x57,
	0x01, 0x3d, 0x7f, 0x7c, 0x53, 0x0b, 0xad, 0x00, 0xf0, 0x55, 0x87, 0x0b, 0xa1, 0xc2, 0x4a, 0x55,
	0x52, 0xe5, 0x3b, 0x9c, 0x3d, 0x45, 0xf7, 0x61, 0x32, 0x3c, 0x29, 0x32, 0x40, 0xd3, 0xed, 0x7b,
	0xae, 0x43, 0x9d, 0x40, 0xe0, 0x92, 0x10, 0x13, 0x7d, 0x07, 0x66, 0x92, 0xd0, 0xe5, 0x4e, 0x2f,
	0x15, 0xf4, 0xac, 0xb8, 0x23, 0x6a, 0xd7, 0xe8, 0x88, 0x8f, 0x61, 0xa9, 0xe9, 0xba, 0xbe, 0x65,
	0x3b, 0x46, 0xe0, 0xfa, 0x3b, 0xae, 0x1b, 0xb0, 0xc0, 0x37, 0x3c, 0x19, 0x23, 0x75, 0x98, 0x3a,
	0xa7, 0x3e, 0x93, 0xad, 0x4b, 0x23, 0x12, 0xc4, 0xaf, 0x61, 0xb9, 0x98, 0x30, 0xaa, 0x2e, 0x37,
	0xf0, 0xc5, 0x6f, 0xe0, 0xeb, 0x6d, 0xcb, 0x4a, 0x10, 0xa4, 0x32, 0xdf, 0x03, 0xd5, 0xb6, 0xae,
	0x76, 0x82, 0x6a, 0x5b, 0x7c, 0x36, 0x4a, 0x05, 0xe7, 0x74, 0x1c, 0x7d, 0x43, 0x06, 0xd4, 0x0a,
	0x0a, 0xc2, 0x05, 0xdc, 0x26, 0xb4, 0xef, 0x9e, 0xd3, 0x1b, 0xa9, 0x50, 0x87, 0x29, 0xd3, 0x60,
	0xa6, 0x61, 0xd1, 0xa8, 0xc5, 0x4a, 0x90, 0x9f, 0xf8, 0x82, 0xbf, 0x15, 0x75, 0x70, 0x09, 0xe2,
	0xff, 0x28, 0xb0, 0x98, 0x08, 0x1d, 0xf2, 0xc6, 0x0d, 0xe3, 0x71, 0x94, 0x51, 0xee, 0x08, 0x57,
	0xf9, 0x29, 0x7b, 0xc4, 0x05, 0xcc, 0x84, 0xbb, 0x01, 0xaf, 0x76, 0x9d, 0xc0, 0xb7, 0xbb, 0x5d,
	0xea, 0x77, 0xe8, 0x39, 0xaf, 0x38, 0x49, 0x95, 0xea, 0xd8, 0xd7, 0x68, 0xaf, 0x2b, 0x82, 0xc7,
	0x51, 0xc8, 0x62, 0x8f, 0x73, 0xc8, 0x34, 0xda, 0x7f, 0x29, 0xb0, 0x54, 0x78, 0xeb, 0xf1, 0x34,
	0xaa, 0x47, 0x30, 0xc9, 0xcb, 0xb4, 0xec, 0x4d, 0xdf, 0x64, 0xe8, 0x62, 0x69, 0x49, 0x51, 0x0f,
	0xb1, 0x65, 0x1a, 0x69, 0xd7, 0x19, 0x2c, 0xaf, 0x95, 0x98, 0xf8, 0x7f, 0x0a, 0x34, 0x92, 0x7b,
	0x1e, 0xba, 0x2c, 0x18, 0xb7, 0x87, 0xaf, 0xe5, 0x2e, 0xf5, 0x66, 0xee, 0x42, 0xf7, 0x61, 0x2a,
	0xec, 0x42, 0x72, 0xa8, 0xbf, 0x3d, 0x54, 0xba, 0xfb, 0x46, 0xcb, 0x39, 0x71, 0x89, 0xc4, 0xc3,
	0xff, 0x56, 0xe0, 0x9b, 0x91, 0x37, 0x1f, 0x8f, 0x97, 0xbf, 0x95, 0xab, 0x7f, 0x49, 0x4c, 0xe0,
	0x0b, 0x80, 0xc4, 0x16, 0x99, 0xb1, 0x55, 0xc9, 0x8d, 0xad, 0x0d, 0x89, 0x79, 0x60, 0xf4, 0x65,
	0xa3, 0x48, 0xed, 0xa0, 0x0d, 0x28, 0x8b, 0xf0, 0x94, 0x06, 0x2f, 0x18, 0x47, 0x84, 0xbd, 0x23,
	0x2c, 0xdc, 0x8c, 0x1e, 0x97, 0x42, 0xf0, 0xe8, 0xc7, 0xe5, 0x72, 0x84, 0x96, 0x92, 0x9a, 0x6c,
	0xe0, 0x3f, 0xa9, 0x80, 0x86, 0xb3, 0x83, 0x57, 0xc0, 0x11, 0xce, 0xc9, 0x18, 0x52, 0x8d, 0x1e,
	0xaf, 0xf2, 0xca, 0x6a, 0xee, 0xca, 0x72, 0xbe, 0xd2, 0xae, 0x31, 0x5f, 0xfd, 0x1c, 0x74, 0x53,
	0xb6, 0xc3, 0x0e, 0x4b, 0x5e, 0x83, 0x57, 0xf4, 0xcc, 0x39, 0x33, 0x0d, 0x0f, 0xd8, 0x70, 0x92,
	0x4e, 0x16, 0x74, 0xcf, 0x07, 0x50, 0x3b, 0xee, 0xb9, 0xe6, 0x59, 0xd4, 0xb5, 0xcb, 0x42, 0x3f,
	0x94, 0x8d, 0x70, 0xc1, 0x1e, 0x04, 0x9a, 0x58, 0xe3, 0x37, 0xb0, 0x90, 0x84, 0x77, 0xb3, 0xe7,
	0x32, 0x3a, 0xa6, 0x84, 0x4e, 0xb5, 0x0a, 0x35, 0xdb, 0x2a, 0x7c, 0xb8, 0x3d, 0x24, 0x72, 0x3c,
	0x99, 0xc4, 0xc7, 0xd9, 0x81, 0x69, 0x52, 0xc6, 0xa4, 0xcc, 0x08, 0xc4, 0xbf, 0x53, 0x40, 0x4f,
	0xde, 0x34, 0x61, 0xb0, 0x8d, 0xe1, 0x49, 0xb8, 0x08, 0x95, 0x28, 0x24, 0xc3, 0x1a, 0xad, 0x91,
	0x18, 0xbe, 0xec, 0xb5, 0x87, 0x9f, 0xc0, 0xa4, 0xc0, 0xbb, 0xe2, 0xff, 0xc9, 0x88, 0x10, 0xc4,
	0x0e, 0xcc, 0xca, 0x75, 0x68, 0x8d, 0x4b, 0xf8, 0xac, 0x42, 0xed, 0x65, 0xcf, 0xca, 0xb1, 0x4a,
	0x6f, 0x71, 0x8c, 0x03, 0xfa, 0x36, 0xa7, 0x6b, 0x7a, 0x0b, 0x7f, 0xd0, 0x60, 0x32, 0x9c, 0xfc,
	0x96, 0xa1, 0xda, 0x62, 0x3b, 0x3c, 0x7c, 0x68, 0x38, 0x4c, 0x54, 0x48, 0xb2, 0xc1, 0xb5, 0x10,
	0xcb, 0xe4, 0x39, 0x11, 0x81, 0xe8, 0x29, 0xd4, 0xc2, 0xa5, 0x2c, 0x06, 0xc3, 0x73, 0x77, 0xde,
	0x3d, 0x24, 0x4d, 0x81, 0xf6, 0xe1, 0xab, 0x03, 0x4a, 0xad, 0x5d, 0xdf, 0xf5, 0x3c, 0x89, 0x11,
	0xb5, 0xef, 0x2b, 0xd8, 0x0c, 0xd3, 0xa1, 0x9f, 0xc0, 0x1c, 0xdf, 0xdc, 0xb6, 0xac, 0x98, 0x55,
	0x38, 0x73, 0xa2, 0xe1, 0x6c, 0x26, 0x79, 0x54, 0xfe, 0x0e, 0xf8, 0x85, 0x67, 0x19, 0x01, 0x8d,
	0x4c, 0xc8, 0xea, 0x65, 0x41, 0xbc, 0x54, 0xd4, 0x4c, 0x22, 0x07, 0x91, 0x1c, 0x49, 0xfe, 0x57,
	0xc6, 0xd4, 0xd0, 0xaf, 0x0c, 0xf4, 0x03, 0x31, 0x64, 0x77, 0x69, 0xbd, 0x22, 0xa2, 0x32, 0xdb,
	0xaa, 0x76, 0xa2, 0x0c, 0xee, 0x86, 0x03, 0x76, 0x97, 0xe2, 0x33, 0xf8, 0x3a, 0xae, 0x3e, 0xf2,
	0x94, 0x97, 0x8e, 0x2f, 0xa8, 0x7a, 0x6b, 0x72, 0xac, 0x57, 0x47, 0x96, 0x8e, 0x10, 0x01, 0xff,
	0x43, 0x81, 0xb9, 0xdc, 0x2f, 0xb0, 0x2f, 0x11, 0x54, 0x54, 0x16, 0xd5, 0x71, 0x94, 0xc5, 0x82,
	0x99, 0x18, 0xdd, 0x87, 0x5b, 0x61, 0x43, 0x65, 0xf6, 0x7b, 0xda, 0xf1, 0xa8, 0xdf, 0x61, 0xd4,
	0x74, 0x9d, 0x70, 0xf8, 0x53, 0x09, 0x12, 0x87, 0x6d, 0xfb, 0x3d, 0x3d, 0xa4, 0x7e, 0x5b, 0x9c,
	0xe0, 0x3f, 0x2a, 0x80, 0x52, 0x36, 0x1c, 0x53, 0x45, 0x7c, 0x06, 0x33, 0xc7, 0x09, 0xd3, 0xf8,
	0x8f, 0xc3, 0xdd, 0xe2, 0x0e, 0x92, 0x96, 0x9f, 0xa5, 0xc3, 0x16, 0x4c, 0xa7, 0x7b, 0x36, 0x42,
	0x50, 0x0a, 0xec, 0x7e, 0x58, 0xbe, 0xaa, 0x44, 0xac, 0xf9, 0x9e, 0xe3, 0x5a, 0xb2, 0x39, 0x8a,
	0x35, 0xdf, 0x33, 0xf9, 0x9e, 0x16, 0xee, 0xf1, 0x35, 0x4f, 0xd9, 0x7e, 0xf8, 0xc3, 0x42, 0xd8,
	0xa3, 0x4a, 0x24, 0x88, 0x1f, 0xc2, 0x74, 0xda, 0x71, 0x9c, 0xfa, 0xd4, 0xee, 0x9e, 0x46, 0x3f,
	0xe5, 0xc4, 0x1a, 0xe9, 0xa0, 0xf5, 0xdc, 0xb7, 0x51, 0xb2, 0xf3, 0x25, 0x3e, 0x81, 0xe9, 0xb4,
	0x09, 0xae, 0x47, 0x25, 0xb4, 0xe5, 0xad, 0x3c, 0xd2, 0x8c, 0xaf, 0x79, 0xa9, 0xe1, 0x5f, 0xe6,
	0x19, 0xa6, 0xd4, 0x2d, 0xd9, 0x58, 0x5f, 0x81, 0x72, 0xf4, 0x8b, 0xb2, 0x0a, 0x93, 0xaf, 0x7c,
	0x3b, 0xa0, 0xfa, 0x04, 0xaa, 0x40, 0xe9, 0xd0, 0x60, 0x4c, 0x57, 0xd6, 0xd7, 0xc2, 0x0a, 0x99,
	0x3c, 0xbc, 0x11, 0x40, 0xb9, 0xe9, 0x53, 0x43, 0xe0, 0x01, 0x94, 0xc3, 0x67, 0x92, 0xae, 0xac,
	0xff, 0x18, 0x20, 0x49, 0x26, 0xce, 0xe1, 0xe0, 0xe5, 0xc1, 0x9e, 0x3e, 0x81, 0x6a, 0x30, 0xf5,
	0x6a, 0xbb, 0x75, 0xd4, 0x3a, 0x78, 0xa6, 0x2b, 0x02, 0x20, 0x21, 0xa0, 0x72, 0x9c, 0x5d, 0x8e,
	0xa3, 0xad, 0x7f, 0x3f, 0xd7, 0x40, 0xd0, 0x14, 0x68, 0xdb, 0xbd, 0x9e, 0x3e, 0x81, 0xca, 0xa0,
	0xee, 0xee, 0xe8, 0x0a, 0x97, 0x74, 0xe0, 0xfa, 0x7d, 0xa3, 0xa7, 0xab, 0xeb, 0x8f, 0x61, 0x36,
	0x1b, 0xd0, 0x82, 0xad, 0xeb, 0x9f, 0xd9, 0x4e, 0x37, 0x14, 0xd8, 0x0e, 0x44, 0x95, 0x0a, 0x05,
	0x86, 0x1a, 0x5a, 0xba, 0xba, 0xf3, 0xd3, 0xbf, 0x7c, 0x6a, 0x28, 0x1f, 0x3f, 0x35, 0x94, 0x7f,
	0x7e, 0x6a, 0x28, 0xbf, 0xff, 0xdc, 0x98, 0xf8, 0xf8, 0xb9, 0x31, 0xf1, 0xf7, 0xcf, 0x8d, 0x89,
	0x5f, 0x7d, 0xb7, 0x6b, 0x07, 0xa7, 0x83, 0xe3, 0x0d, 0xd3, 0xed, 0x6f, 0x7a, 0xb6, 0xd3, 0x35,
	0x0d, 0x6f, 0x33, 0xb0, 0x4d, 0xcb, 0xdc, 0x4c, 0xc5, 0xd4, 0x71, 0x59, 0xfc, 0xc5, 0x7f, 0xf0,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x4a, 0x16, 0x30, 0xe4, 0x17, 0x00, 0x00,
}

func (m *TableSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.TableID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CompeleteStatus {
		i--
		if m.CompeleteStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Watermark != nil {
		{
			size, err := m.Watermark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Watermark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watermark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Watermark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x18
	}
	if m.ResolvedTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x10
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSyncPoint {
		i--
		if m.IsSyncPoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.CommitTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x10
	}
	if m.Action != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSyncPoint {
		i--
		if m.IsSyncPoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CommitTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfluencedDispatchers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfluencedDispatchers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfluencedDispatchers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExcludeDispatcherId != nil {
		{
			size, err := m.ExcludeDispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DispatcherIDs) > 0 {
		for iNdEx := len(m.DispatcherIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DispatcherIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.InfluenceType != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.InfluenceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InfluencedDispatchers != nil {
		{
			size, err := m.InfluencedDispatchers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DispatcherStatuses) > 0 {
		for iNdEx := len(m.DispatcherStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DispatcherStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckpointTsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointTsMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckpointTsMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x10
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentPdTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CurrentPdTs))
		i--
		dAtA[i] = 0x28
	}
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x20
	}
	if m.DispatcherID != nil {
		{
			size, err := m.DispatcherID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleDispatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleDispatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleDispatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleAction != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ScheduleAction))
		i--
		dAtA[i] = 0x18
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		for iNdEx := len(m.Err) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Err[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FeedState) > 0 {
		i -= len(m.FeedState)
		copy(dAtA[i:], m.FeedState)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.FeedState)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoordinatorBootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorBootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorBootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoordinatorBootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorBootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorBootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddMaintainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMaintainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMaintainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMaintainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMaintainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMaintainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Cascade {
		i--
		if m.Cascade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerBootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerBootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerBootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableTriggerEventDispatcherId != nil {
		{
			size, err := m.TableTriggerEventDispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerBootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerBootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerBootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerPostBootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerPostBootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerPostBootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TableTriggerEventDispatcherId != nil {
		{
			size, err := m.TableTriggerEventDispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerPostBootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerPostBootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerPostBootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TableTriggerEventDispatcherId != nil {
		{
			size, err := m.TableTriggerEventDispatcherId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SchemaName) > 0 {
		i -= len(m.SchemaName)
		copy(dAtA[i:], m.SchemaName)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.SchemaName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TableID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapTableSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapTableSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapTableSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockState != nil {
		{
			size, err := m.BlockState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x28
	}
	if m.ComponentStatus != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ComponentStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfluencedTables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfluencedTables) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfluencedTables) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TableIDs) > 0 {
		dAtA32 := make([]byte, len(m.TableIDs)*10)
		var j31 int
		for _, num1 := range m.TableIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintHeartbeat(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x12
	}
	if m.InfluenceType != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.InfluenceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.SchemaID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchemaIDChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaIDChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaIDChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewSchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.NewSchemaID))
		i--
		dAtA[i] = 0x18
	}
	if m.OldSchemaID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.OldSchemaID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x40
	}
	if m.IsSyncPoint {
		i--
		if m.IsSyncPoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.UpdatedSchemas) > 0 {
		for iNdEx := len(m.UpdatedSchemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdatedSchemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NeedAddedTables) > 0 {
		for iNdEx := len(m.NeedAddedTables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NeedAddedTables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NeedDroppedTables != nil {
		{
			size, err := m.NeedDroppedTables.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BlockTables != nil {
		{
			size, err := m.BlockTables.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.BlockTs))
		i--
		dAtA[i] = 0x10
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableSpanBlockStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpanBlockStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpanBlockStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableSpanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventSizePerSecond != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EventSizePerSecond))))
		i--
		dAtA[i] = 0x25
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x18
	}
	if m.ComponentStatus != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ComponentStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockStatuses) > 0 {
		for iNdEx := len(m.BlockStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChangefeedID != nil {
		{
			size, err := m.ChangefeedID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunningError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunningError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Low != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x10
	}
	if m.High != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangefeedID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangefeedID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangefeedID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Low != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x10
	}
	if m.High != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeartbeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TableSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovHeartbeat(uint64(m.TableID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *HeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Watermark != nil {
		l = m.Watermark.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.CompeleteStatus {
		n += 2
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *Watermark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.ResolvedTs))
	}
	if m.Seq != 0 {
		n += 1 + sovHeartbeat(uint64(m.Seq))
	}
	return n
}

func (m *DispatcherAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovHeartbeat(uint64(m.Action))
	}
	if m.CommitTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CommitTs))
	}
	if m.IsSyncPoint {
		n += 2
	}
	return n
}

func (m *ACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CommitTs))
	}
	if m.IsSyncPoint {
		n += 2
	}
	return n
}

func (m *InfluencedDispatchers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfluenceType != 0 {
		n += 1 + sovHeartbeat(uint64(m.InfluenceType))
	}
	if len(m.DispatcherIDs) > 0 {
		for _, e := range m.DispatcherIDs {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	if m.ExcludeDispatcherId != nil {
		l = m.ExcludeDispatcherId.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *DispatcherStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfluencedDispatchers != nil {
		l = m.InfluencedDispatchers.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *HeartBeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.DispatcherStatuses) > 0 {
		for _, e := range m.DispatcherStatuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *CheckpointTsMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *DispatcherConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.StartTs))
	}
	if m.DispatcherID != nil {
		l = m.DispatcherID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	if m.CurrentPdTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CurrentPdTs))
	}
	return n
}

func (m *ScheduleDispatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ScheduleAction != 0 {
		n += 1 + sovHeartbeat(uint64(m.ScheduleAction))
	}
	return n
}

func (m *MaintainerHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *MaintainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.FeedState)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHeartbeat(uint64(m.State))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if len(m.Err) > 0 {
		for _, e := range m.Err {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *CoordinatorBootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovHeartbeat(uint64(m.Version))
	}
	return n
}

func (m *CoordinatorBootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *AddMaintainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *RemoveMaintainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Cascade {
		n += 2
	}
	if m.Removed {
		n += 2
	}
	return n
}

func (m *MaintainerBootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.StartTs))
	}
	if m.TableTriggerEventDispatcherId != nil {
		l = m.TableTriggerEventDispatcherId.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *MaintainerBootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *MaintainerPostBootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.TableTriggerEventDispatcherId != nil {
		l = m.TableTriggerEventDispatcherId.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *MaintainerPostBootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.TableTriggerEventDispatcherId != nil {
		l = m.TableTriggerEventDispatcherId.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *SchemaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	l = len(m.SchemaName)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *TableInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovHeartbeat(uint64(m.TableID))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *BootstrapTableSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ComponentStatus != 0 {
		n += 1 + sovHeartbeat(uint64(m.ComponentStatus))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if m.BlockState != nil {
		l = m.BlockState.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *MaintainerCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Removed {
		n += 2
	}
	return n
}

func (m *MaintainerCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *InfluencedTables) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfluenceType != 0 {
		n += 1 + sovHeartbeat(uint64(m.InfluenceType))
	}
	if len(m.TableIDs) > 0 {
		l = 0
		for _, e := range m.TableIDs {
			l += sovHeartbeat(uint64(e))
		}
		n += 1 + sovHeartbeat(uint64(l)) + l
	}
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovHeartbeat(uint64(m.TableID))
	}
	if m.SchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.SchemaID))
	}
	return n
}

func (m *SchemaIDChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovHeartbeat(uint64(m.TableID))
	}
	if m.OldSchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.OldSchemaID))
	}
	if m.NewSchemaID != 0 {
		n += 1 + sovHeartbeat(uint64(m.NewSchemaID))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBlocked {
		n += 2
	}
	if m.BlockTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.BlockTs))
	}
	if m.BlockTables != nil {
		l = m.BlockTables.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.NeedDroppedTables != nil {
		l = m.NeedDroppedTables.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.NeedAddedTables) > 0 {
		for _, e := range m.NeedAddedTables {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if len(m.UpdatedSchemas) > 0 {
		for _, e := range m.UpdatedSchemas {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.IsSyncPoint {
		n += 2
	}
	if m.Stage != 0 {
		n += 1 + sovHeartbeat(uint64(m.Stage))
	}
	return n
}

func (m *TableSpanBlockStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *TableSpanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ComponentStatus != 0 {
		n += 1 + sovHeartbeat(uint64(m.ComponentStatus))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if m.EventSizePerSecond != 0 {
		n += 5
	}
	return n
}

func (m *BlockStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangefeedID != nil {
		l = m.ChangefeedID.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.BlockStatuses) > 0 {
		for _, e := range m.BlockStatuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *RunningError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *DispatcherID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.High != 0 {
		n += 1 + sovHeartbeat(uint64(m.High))
	}
	if m.Low != 0 {
		n += 1 + sovHeartbeat(uint64(m.Low))
	}
	return n
}

func (m *ChangefeedID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.High != 0 {
		n += 1 + sovHeartbeat(uint64(m.High))
	}
	if m.Low != 0 {
		n += 1 + sovHeartbeat(uint64(m.Low))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watermark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watermark == nil {
				m.Watermark = &Watermark{}
			}
			if err := m.Watermark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &TableSpanStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompeleteStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompeleteStatus = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &RunningError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Watermark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watermark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watermark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSyncPoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSyncPoint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSyncPoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSyncPoint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfluencedDispatchers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfluencedDispatchers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfluencedDispatchers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfluenceType", wireType)
			}
			m.InfluenceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfluenceType |= InfluenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispatcherIDs = append(m.DispatcherIDs, &DispatcherID{})
			if err := m.DispatcherIDs[len(m.DispatcherIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeDispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExcludeDispatcherId == nil {
				m.ExcludeDispatcherId = &DispatcherID{}
			}
			if err := m.ExcludeDispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfluencedDispatchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfluencedDispatchers == nil {
				m.InfluencedDispatchers = &InfluencedDispatchers{}
			}
			if err := m.InfluencedDispatchers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &DispatcherAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &ACK{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispatcherStatuses = append(m.DispatcherStatuses, &DispatcherStatus{})
			if err := m.DispatcherStatuses[len(m.DispatcherStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointTsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointTsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointTsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DispatcherID == nil {
				m.DispatcherID = &DispatcherID{}
			}
			if err := m.DispatcherID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPdTs", wireType)
			}
			m.CurrentPdTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPdTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleDispatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleDispatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleDispatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DispatcherConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAction", wireType)
			}
			m.ScheduleAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleAction |= ScheduleAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &MaintainerStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ComponentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = append(m.Err, &RunningError{})
			if err := m.Err[len(m.Err)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorBootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorBootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorBootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorBootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorBootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorBootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &MaintainerStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMaintainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMaintainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMaintainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ChangefeedID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMaintainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMaintainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMaintainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ChangefeedID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cascade = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerBootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerBootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerBootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableTriggerEventDispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableTriggerEventDispatcherId == nil {
				m.TableTriggerEventDispatcherId = &DispatcherID{}
			}
			if err := m.TableTriggerEventDispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerBootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerBootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerBootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &BootstrapTableSpan{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &RunningError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerPostBootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerPostBootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerPostBootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableTriggerEventDispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableTriggerEventDispatcherId == nil {
				m.TableTriggerEventDispatcherId = &DispatcherID{}
			}
			if err := m.TableTriggerEventDispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, &SchemaInfo{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerPostBootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerPostBootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerPostBootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableTriggerEventDispatcherId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableTriggerEventDispatcherId == nil {
				m.TableTriggerEventDispatcherId = &DispatcherID{}
			}
			if err := m.TableTriggerEventDispatcherId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &RunningError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &TableInfo{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapTableSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapTableSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapTableSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &DispatcherID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentStatus", wireType)
			}
			m.ComponentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentStatus |= ComponentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockState == nil {
				m.BlockState = &State{}
			}
			if err := m.BlockState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfluencedTables) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfluencedTables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfluencedTables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfluenceType", wireType)
			}
			m.InfluenceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfluenceType |= InfluenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHeartbeat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TableIDs = append(m.TableIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHeartbeat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHeartbeat
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHeartbeat
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TableIDs) == 0 {
					m.TableIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHeartbeat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TableIDs = append(m.TableIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TableIDs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaID", wireType)
			}
			m.SchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaIDChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaIDChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaIDChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSchemaID", wireType)
			}
			m.OldSchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldSchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSchemaID", wireType)
			}
			m.NewSchemaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSchemaID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTs", wireType)
			}
			m.BlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTables == nil {
				m.BlockTables = &InfluencedTables{}
			}
			if err := m.BlockTables.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDroppedTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NeedDroppedTables == nil {
				m.NeedDroppedTables = &InfluencedTables{}
			}
			if err := m.NeedDroppedTables.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedAddedTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeedAddedTables = append(m.NeedAddedTables, &Table{})
			if err := m.NeedAddedTables[len(m.NeedAddedTables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSchemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedSchemas = append(m.UpdatedSchemas, &SchemaIDChange{})
			if err := m.UpdatedSchemas[len(m.UpdatedSchemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSyncPoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSyncPoint = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= BlockStage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSpanBlockStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpanBlockStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpanBlockStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &DispatcherID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSpanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &DispatcherID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentStatus", wireType)
			}
			m.ComponentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentStatus |= ComponentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventSizePerSecond", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EventSizePerSecond = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangefeedID == nil {
				m.ChangefeedID = &ChangefeedID{}
			}
			if err := m.ChangefeedID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockStatuses = append(m.BlockStatuses, &TableSpanBlockStatus{})
			if err := m.BlockStatuses[len(m.BlockStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunningError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangefeedID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangefeedID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangefeedID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeartbeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeartbeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeartbeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeartbeat = fmt.Errorf("proto: unexpected end of group")
)
