// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heartbeatpb/heartbeat.proto

package heartbeatpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_Write Action = 0
	Action_Pass  Action = 1
)

var Action_name = map[int32]string{
	0: "Write",
	1: "Pass",
}

var Action_value = map[string]int32{
	"Write": 0,
	"Pass":  1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}

type ScheduleAction int32

const (
	ScheduleAction_Create ScheduleAction = 0
	ScheduleAction_Remove ScheduleAction = 1
)

var ScheduleAction_name = map[int32]string{
	0: "Create",
	1: "Remove",
}

var ScheduleAction_value = map[string]int32{
	"Create": 0,
	"Remove": 1,
}

func (x ScheduleAction) String() string {
	return proto.EnumName(ScheduleAction_name, int32(x))
}

func (ScheduleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{1}
}

type ComponentState int32

const (
	ComponentState_Unknown   ComponentState = 0
	ComponentState_Absent    ComponentState = 1
	ComponentState_Preparing ComponentState = 2
	ComponentState_Prepared  ComponentState = 3
	ComponentState_Working   ComponentState = 4
	ComponentState_Stopping  ComponentState = 5
	ComponentState_Stopped   ComponentState = 6
)

var ComponentState_name = map[int32]string{
	0: "Unknown",
	1: "Absent",
	2: "Preparing",
	3: "Prepared",
	4: "Working",
	5: "Stopping",
	6: "Stopped",
}

var ComponentState_value = map[string]int32{
	"Unknown":   0,
	"Absent":    1,
	"Preparing": 2,
	"Prepared":  3,
	"Working":   4,
	"Stopping":  5,
	"Stopped":   6,
}

func (x ComponentState) String() string {
	return proto.EnumName(ComponentState_name, int32(x))
}

func (ComponentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{2}
}

type TableSpan struct {
	TableID  uint64 `protobuf:"varint,1,opt,name=TableID,proto3" json:"TableID,omitempty"`
	StartKey []byte `protobuf:"bytes,2,opt,name=StartKey,proto3" json:"StartKey,omitempty"`
	EndKey   []byte `protobuf:"bytes,3,opt,name=EndKey,proto3" json:"EndKey,omitempty"`
}

func (m *TableSpan) Reset()         { *m = TableSpan{} }
func (m *TableSpan) String() string { return proto.CompactTextString(m) }
func (*TableSpan) ProtoMessage()    {}
func (*TableSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{0}
}
func (m *TableSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpan.Merge(m, src)
}
func (m *TableSpan) XXX_Size() int {
	return m.Size()
}
func (m *TableSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpan.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpan proto.InternalMessageInfo

func (m *TableSpan) GetTableID() uint64 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableSpan) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *TableSpan) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type HeartBeatRequest struct {
	ChangefeedID    string             `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Watermark       *Watermark         `protobuf:"bytes,2,opt,name=watermark,proto3" json:"watermark,omitempty"`
	Statuses        []*TableSpanStatus `protobuf:"bytes,3,rep,name=statuses,proto3" json:"statuses,omitempty"`
	CompeleteStatus bool               `protobuf:"varint,4,opt,name=compeleteStatus,proto3" json:"compeleteStatus,omitempty"`
	Warning         *RunningError      `protobuf:"bytes,5,opt,name=warning,proto3" json:"warning,omitempty"`
	Err             *RunningError      `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *HeartBeatRequest) Reset()         { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()    {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{1}
}
func (m *HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest.Merge(m, src)
}
func (m *HeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest proto.InternalMessageInfo

func (m *HeartBeatRequest) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *HeartBeatRequest) GetWatermark() *Watermark {
	if m != nil {
		return m.Watermark
	}
	return nil
}

func (m *HeartBeatRequest) GetStatuses() []*TableSpanStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *HeartBeatRequest) GetCompeleteStatus() bool {
	if m != nil {
		return m.CompeleteStatus
	}
	return false
}

func (m *HeartBeatRequest) GetWarning() *RunningError {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (m *HeartBeatRequest) GetErr() *RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

type Watermark struct {
	CheckpointTs uint64 `protobuf:"varint,1,opt,name=checkpointTs,proto3" json:"checkpointTs,omitempty"`
	ResolvedTs   uint64 `protobuf:"varint,2,opt,name=resolvedTs,proto3" json:"resolvedTs,omitempty"`
}

func (m *Watermark) Reset()         { *m = Watermark{} }
func (m *Watermark) String() string { return proto.CompactTextString(m) }
func (*Watermark) ProtoMessage()    {}
func (*Watermark) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{2}
}
func (m *Watermark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Watermark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Watermark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Watermark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watermark.Merge(m, src)
}
func (m *Watermark) XXX_Size() int {
	return m.Size()
}
func (m *Watermark) XXX_DiscardUnknown() {
	xxx_messageInfo_Watermark.DiscardUnknown(m)
}

var xxx_messageInfo_Watermark proto.InternalMessageInfo

func (m *Watermark) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *Watermark) GetResolvedTs() uint64 {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

type DispatcherAction struct {
	Span     *TableSpan `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	Action   Action     `protobuf:"varint,2,opt,name=action,proto3,enum=heartbeatpb.Action" json:"action,omitempty"`
	CommitTs uint64     `protobuf:"varint,3,opt,name=CommitTs,proto3" json:"CommitTs,omitempty"`
}

func (m *DispatcherAction) Reset()         { *m = DispatcherAction{} }
func (m *DispatcherAction) String() string { return proto.CompactTextString(m) }
func (*DispatcherAction) ProtoMessage()    {}
func (*DispatcherAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{3}
}
func (m *DispatcherAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherAction.Merge(m, src)
}
func (m *DispatcherAction) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherAction.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherAction proto.InternalMessageInfo

func (m *DispatcherAction) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *DispatcherAction) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_Write
}

func (m *DispatcherAction) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

type HeartBeatResponse struct {
	Actions      []*DispatcherAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	ChangefeedID string              `protobuf:"bytes,2,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *HeartBeatResponse) Reset()         { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()    {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{4}
}
func (m *HeartBeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatResponse.Merge(m, src)
}
func (m *HeartBeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatResponse proto.InternalMessageInfo

func (m *HeartBeatResponse) GetActions() []*DispatcherAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *HeartBeatResponse) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

type DispatcherConfig struct {
	Span    *TableSpan `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	StartTs uint64     `protobuf:"varint,2,opt,name=startTs,proto3" json:"startTs,omitempty"`
}

func (m *DispatcherConfig) Reset()         { *m = DispatcherConfig{} }
func (m *DispatcherConfig) String() string { return proto.CompactTextString(m) }
func (*DispatcherConfig) ProtoMessage()    {}
func (*DispatcherConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{5}
}
func (m *DispatcherConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatcherConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatcherConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatcherConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatcherConfig.Merge(m, src)
}
func (m *DispatcherConfig) XXX_Size() int {
	return m.Size()
}
func (m *DispatcherConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatcherConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DispatcherConfig proto.InternalMessageInfo

func (m *DispatcherConfig) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *DispatcherConfig) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

type ScheduleDispatcherRequest struct {
	ChangefeedID   string            `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Config         *DispatcherConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ScheduleAction ScheduleAction    `protobuf:"varint,3,opt,name=scheduleAction,proto3,enum=heartbeatpb.ScheduleAction" json:"scheduleAction,omitempty"`
	IsSecondary    bool              `protobuf:"varint,4,opt,name=is_secondary,json=isSecondary,proto3" json:"is_secondary,omitempty"`
}

func (m *ScheduleDispatcherRequest) Reset()         { *m = ScheduleDispatcherRequest{} }
func (m *ScheduleDispatcherRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleDispatcherRequest) ProtoMessage()    {}
func (*ScheduleDispatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{6}
}
func (m *ScheduleDispatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleDispatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleDispatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleDispatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleDispatcherRequest.Merge(m, src)
}
func (m *ScheduleDispatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleDispatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleDispatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleDispatcherRequest proto.InternalMessageInfo

func (m *ScheduleDispatcherRequest) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *ScheduleDispatcherRequest) GetConfig() *DispatcherConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ScheduleDispatcherRequest) GetScheduleAction() ScheduleAction {
	if m != nil {
		return m.ScheduleAction
	}
	return ScheduleAction_Create
}

func (m *ScheduleDispatcherRequest) GetIsSecondary() bool {
	if m != nil {
		return m.IsSecondary
	}
	return false
}

type MaintainerHeartbeat struct {
	Statuses []*MaintainerStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *MaintainerHeartbeat) Reset()         { *m = MaintainerHeartbeat{} }
func (m *MaintainerHeartbeat) String() string { return proto.CompactTextString(m) }
func (*MaintainerHeartbeat) ProtoMessage()    {}
func (*MaintainerHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{7}
}
func (m *MaintainerHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerHeartbeat.Merge(m, src)
}
func (m *MaintainerHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerHeartbeat proto.InternalMessageInfo

func (m *MaintainerHeartbeat) GetStatuses() []*MaintainerStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type MaintainerStatus struct {
	ChangefeedID string          `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	FeedState    string          `protobuf:"bytes,2,opt,name=feed_state,json=feedState,proto3" json:"feed_state,omitempty"`
	State        ComponentState  `protobuf:"varint,3,opt,name=state,proto3,enum=heartbeatpb.ComponentState" json:"state,omitempty"`
	CheckpointTs uint64          `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	Warning      []*RunningError `protobuf:"bytes,5,rep,name=warning,proto3" json:"warning,omitempty"`
	Err          []*RunningError `protobuf:"bytes,6,rep,name=err,proto3" json:"err,omitempty"`
}

func (m *MaintainerStatus) Reset()         { *m = MaintainerStatus{} }
func (m *MaintainerStatus) String() string { return proto.CompactTextString(m) }
func (*MaintainerStatus) ProtoMessage()    {}
func (*MaintainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{8}
}
func (m *MaintainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerStatus.Merge(m, src)
}
func (m *MaintainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerStatus proto.InternalMessageInfo

func (m *MaintainerStatus) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *MaintainerStatus) GetFeedState() string {
	if m != nil {
		return m.FeedState
	}
	return ""
}

func (m *MaintainerStatus) GetState() ComponentState {
	if m != nil {
		return m.State
	}
	return ComponentState_Unknown
}

func (m *MaintainerStatus) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *MaintainerStatus) GetWarning() []*RunningError {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (m *MaintainerStatus) GetErr() []*RunningError {
	if m != nil {
		return m.Err
	}
	return nil
}

type CoordinatorBootstrapRequest struct {
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *CoordinatorBootstrapRequest) Reset()         { *m = CoordinatorBootstrapRequest{} }
func (m *CoordinatorBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*CoordinatorBootstrapRequest) ProtoMessage()    {}
func (*CoordinatorBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{9}
}
func (m *CoordinatorBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorBootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorBootstrapRequest.Merge(m, src)
}
func (m *CoordinatorBootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorBootstrapRequest proto.InternalMessageInfo

func (m *CoordinatorBootstrapRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CoordinatorBootstrapResponse struct {
	Statuses []*MaintainerStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *CoordinatorBootstrapResponse) Reset()         { *m = CoordinatorBootstrapResponse{} }
func (m *CoordinatorBootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*CoordinatorBootstrapResponse) ProtoMessage()    {}
func (*CoordinatorBootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{10}
}
func (m *CoordinatorBootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorBootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorBootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorBootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorBootstrapResponse.Merge(m, src)
}
func (m *CoordinatorBootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorBootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorBootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorBootstrapResponse proto.InternalMessageInfo

func (m *CoordinatorBootstrapResponse) GetStatuses() []*MaintainerStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type DispatchMaintainerRequest struct {
	AddMaintainers    []*AddMaintainerRequest    `protobuf:"bytes,1,rep,name=add_maintainers,json=addMaintainers,proto3" json:"add_maintainers,omitempty"`
	RemoveMaintainers []*RemoveMaintainerRequest `protobuf:"bytes,2,rep,name=remove_maintainers,json=removeMaintainers,proto3" json:"remove_maintainers,omitempty"`
}

func (m *DispatchMaintainerRequest) Reset()         { *m = DispatchMaintainerRequest{} }
func (m *DispatchMaintainerRequest) String() string { return proto.CompactTextString(m) }
func (*DispatchMaintainerRequest) ProtoMessage()    {}
func (*DispatchMaintainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{11}
}
func (m *DispatchMaintainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchMaintainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchMaintainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatchMaintainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchMaintainerRequest.Merge(m, src)
}
func (m *DispatchMaintainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *DispatchMaintainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchMaintainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchMaintainerRequest proto.InternalMessageInfo

func (m *DispatchMaintainerRequest) GetAddMaintainers() []*AddMaintainerRequest {
	if m != nil {
		return m.AddMaintainers
	}
	return nil
}

func (m *DispatchMaintainerRequest) GetRemoveMaintainers() []*RemoveMaintainerRequest {
	if m != nil {
		return m.RemoveMaintainers
	}
	return nil
}

type AddMaintainerRequest struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config       []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	IsSecondary  bool   `protobuf:"varint,3,opt,name=is_secondary,json=isSecondary,proto3" json:"is_secondary,omitempty"`
	CheckpointTs uint64 `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
}

func (m *AddMaintainerRequest) Reset()         { *m = AddMaintainerRequest{} }
func (m *AddMaintainerRequest) String() string { return proto.CompactTextString(m) }
func (*AddMaintainerRequest) ProtoMessage()    {}
func (*AddMaintainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{12}
}
func (m *AddMaintainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMaintainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMaintainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMaintainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMaintainerRequest.Merge(m, src)
}
func (m *AddMaintainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddMaintainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMaintainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMaintainerRequest proto.InternalMessageInfo

func (m *AddMaintainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddMaintainerRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AddMaintainerRequest) GetIsSecondary() bool {
	if m != nil {
		return m.IsSecondary
	}
	return false
}

func (m *AddMaintainerRequest) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

type RemoveMaintainerRequest struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cascade bool   `protobuf:"varint,2,opt,name=cascade,proto3" json:"cascade,omitempty"`
}

func (m *RemoveMaintainerRequest) Reset()         { *m = RemoveMaintainerRequest{} }
func (m *RemoveMaintainerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveMaintainerRequest) ProtoMessage()    {}
func (*RemoveMaintainerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{13}
}
func (m *RemoveMaintainerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMaintainerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMaintainerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMaintainerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMaintainerRequest.Merge(m, src)
}
func (m *RemoveMaintainerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMaintainerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMaintainerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMaintainerRequest proto.InternalMessageInfo

func (m *RemoveMaintainerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveMaintainerRequest) GetCascade() bool {
	if m != nil {
		return m.Cascade
	}
	return false
}

type MaintainerBootstrapRequest struct {
	ChangefeedID string `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Config       []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *MaintainerBootstrapRequest) Reset()         { *m = MaintainerBootstrapRequest{} }
func (m *MaintainerBootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*MaintainerBootstrapRequest) ProtoMessage()    {}
func (*MaintainerBootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{14}
}
func (m *MaintainerBootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerBootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerBootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerBootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerBootstrapRequest.Merge(m, src)
}
func (m *MaintainerBootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerBootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerBootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerBootstrapRequest proto.InternalMessageInfo

func (m *MaintainerBootstrapRequest) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *MaintainerBootstrapRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type MaintainerBootstrapResponse struct {
	ChangefeedID string             `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Statuses     []*TableSpanStatus `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *MaintainerBootstrapResponse) Reset()         { *m = MaintainerBootstrapResponse{} }
func (m *MaintainerBootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*MaintainerBootstrapResponse) ProtoMessage()    {}
func (*MaintainerBootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{15}
}
func (m *MaintainerBootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerBootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerBootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerBootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerBootstrapResponse.Merge(m, src)
}
func (m *MaintainerBootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerBootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerBootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerBootstrapResponse proto.InternalMessageInfo

func (m *MaintainerBootstrapResponse) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *MaintainerBootstrapResponse) GetStatuses() []*TableSpanStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type MaintainerCloseRequest struct {
	ChangefeedID string `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
}

func (m *MaintainerCloseRequest) Reset()         { *m = MaintainerCloseRequest{} }
func (m *MaintainerCloseRequest) String() string { return proto.CompactTextString(m) }
func (*MaintainerCloseRequest) ProtoMessage()    {}
func (*MaintainerCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{16}
}
func (m *MaintainerCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerCloseRequest.Merge(m, src)
}
func (m *MaintainerCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerCloseRequest proto.InternalMessageInfo

func (m *MaintainerCloseRequest) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

type MaintainerCloseResponse struct {
	ChangefeedID string `protobuf:"bytes,1,opt,name=changefeedID,proto3" json:"changefeedID,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MaintainerCloseResponse) Reset()         { *m = MaintainerCloseResponse{} }
func (m *MaintainerCloseResponse) String() string { return proto.CompactTextString(m) }
func (*MaintainerCloseResponse) ProtoMessage()    {}
func (*MaintainerCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{17}
}
func (m *MaintainerCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaintainerCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaintainerCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaintainerCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaintainerCloseResponse.Merge(m, src)
}
func (m *MaintainerCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MaintainerCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaintainerCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaintainerCloseResponse proto.InternalMessageInfo

func (m *MaintainerCloseResponse) GetChangefeedID() string {
	if m != nil {
		return m.ChangefeedID
	}
	return ""
}

func (m *MaintainerCloseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type State struct {
	IsBlocked            bool         `protobuf:"varint,1,opt,name=IsBlocked,proto3" json:"IsBlocked,omitempty"`
	BlockTs              uint64       `protobuf:"varint,2,opt,name=BlockTs,proto3" json:"BlockTs,omitempty"`
	BlockTableSpan       []*TableSpan `protobuf:"bytes,3,rep,name=BlockTableSpan,proto3" json:"BlockTableSpan,omitempty"`
	NeedDroppedTableSpan []*TableSpan `protobuf:"bytes,4,rep,name=NeedDroppedTableSpan,proto3" json:"NeedDroppedTableSpan,omitempty"`
	NeedAddedTableSpan   []*TableSpan `protobuf:"bytes,5,rep,name=NeedAddedTableSpan,proto3" json:"NeedAddedTableSpan,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{18}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *State) GetBlockTs() uint64 {
	if m != nil {
		return m.BlockTs
	}
	return 0
}

func (m *State) GetBlockTableSpan() []*TableSpan {
	if m != nil {
		return m.BlockTableSpan
	}
	return nil
}

func (m *State) GetNeedDroppedTableSpan() []*TableSpan {
	if m != nil {
		return m.NeedDroppedTableSpan
	}
	return nil
}

func (m *State) GetNeedAddedTableSpan() []*TableSpan {
	if m != nil {
		return m.NeedAddedTableSpan
	}
	return nil
}

type TableSpanStatus struct {
	Span            *TableSpan     `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	ComponentStatus ComponentState `protobuf:"varint,2,opt,name=component_status,json=componentStatus,proto3,enum=heartbeatpb.ComponentState" json:"component_status,omitempty"`
	State           *State         `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	CheckpointTs    uint64         `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
}

func (m *TableSpanStatus) Reset()         { *m = TableSpanStatus{} }
func (m *TableSpanStatus) String() string { return proto.CompactTextString(m) }
func (*TableSpanStatus) ProtoMessage()    {}
func (*TableSpanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{19}
}
func (m *TableSpanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpanStatus.Merge(m, src)
}
func (m *TableSpanStatus) XXX_Size() int {
	return m.Size()
}
func (m *TableSpanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpanStatus proto.InternalMessageInfo

func (m *TableSpanStatus) GetSpan() *TableSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *TableSpanStatus) GetComponentStatus() ComponentState {
	if m != nil {
		return m.ComponentStatus
	}
	return ComponentState_Unknown
}

func (m *TableSpanStatus) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TableSpanStatus) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

type RunningError struct {
	Time    string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RunningError) Reset()         { *m = RunningError{} }
func (m *RunningError) String() string { return proto.CompactTextString(m) }
func (*RunningError) ProtoMessage()    {}
func (*RunningError) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d584080fdadb670, []int{20}
}
func (m *RunningError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunningError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunningError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunningError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningError.Merge(m, src)
}
func (m *RunningError) XXX_Size() int {
	return m.Size()
}
func (m *RunningError) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningError.DiscardUnknown(m)
}

var xxx_messageInfo_RunningError proto.InternalMessageInfo

func (m *RunningError) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RunningError) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *RunningError) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RunningError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("heartbeatpb.Action", Action_name, Action_value)
	proto.RegisterEnum("heartbeatpb.ScheduleAction", ScheduleAction_name, ScheduleAction_value)
	proto.RegisterEnum("heartbeatpb.ComponentState", ComponentState_name, ComponentState_value)
	proto.RegisterType((*TableSpan)(nil), "heartbeatpb.TableSpan")
	proto.RegisterType((*HeartBeatRequest)(nil), "heartbeatpb.HeartBeatRequest")
	proto.RegisterType((*Watermark)(nil), "heartbeatpb.Watermark")
	proto.RegisterType((*DispatcherAction)(nil), "heartbeatpb.DispatcherAction")
	proto.RegisterType((*HeartBeatResponse)(nil), "heartbeatpb.HeartBeatResponse")
	proto.RegisterType((*DispatcherConfig)(nil), "heartbeatpb.DispatcherConfig")
	proto.RegisterType((*ScheduleDispatcherRequest)(nil), "heartbeatpb.ScheduleDispatcherRequest")
	proto.RegisterType((*MaintainerHeartbeat)(nil), "heartbeatpb.MaintainerHeartbeat")
	proto.RegisterType((*MaintainerStatus)(nil), "heartbeatpb.MaintainerStatus")
	proto.RegisterType((*CoordinatorBootstrapRequest)(nil), "heartbeatpb.CoordinatorBootstrapRequest")
	proto.RegisterType((*CoordinatorBootstrapResponse)(nil), "heartbeatpb.CoordinatorBootstrapResponse")
	proto.RegisterType((*DispatchMaintainerRequest)(nil), "heartbeatpb.DispatchMaintainerRequest")
	proto.RegisterType((*AddMaintainerRequest)(nil), "heartbeatpb.AddMaintainerRequest")
	proto.RegisterType((*RemoveMaintainerRequest)(nil), "heartbeatpb.RemoveMaintainerRequest")
	proto.RegisterType((*MaintainerBootstrapRequest)(nil), "heartbeatpb.MaintainerBootstrapRequest")
	proto.RegisterType((*MaintainerBootstrapResponse)(nil), "heartbeatpb.MaintainerBootstrapResponse")
	proto.RegisterType((*MaintainerCloseRequest)(nil), "heartbeatpb.MaintainerCloseRequest")
	proto.RegisterType((*MaintainerCloseResponse)(nil), "heartbeatpb.MaintainerCloseResponse")
	proto.RegisterType((*State)(nil), "heartbeatpb.State")
	proto.RegisterType((*TableSpanStatus)(nil), "heartbeatpb.TableSpanStatus")
	proto.RegisterType((*RunningError)(nil), "heartbeatpb.RunningError")
}

func init() { proto.RegisterFile("heartbeatpb/heartbeat.proto", fileDescriptor_6d584080fdadb670) }

var fileDescriptor_6d584080fdadb670 = []byte{
	// 1140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xfa, 0xb7, 0x9f, 0x5d, 0xc7, 0x9d, 0x56, 0xa9, 0xd3, 0x24, 0x56, 0xba, 0xdf, 0xef,
	0xc1, 0xa4, 0x52, 0x22, 0x52, 0x50, 0x41, 0x42, 0x48, 0x89, 0xd3, 0xaa, 0x2d, 0x02, 0xa2, 0x75,
	0x50, 0x5a, 0x2e, 0xd1, 0x78, 0xf7, 0xc5, 0x5e, 0xc5, 0x9e, 0x59, 0x66, 0xc6, 0x89, 0x22, 0xee,
	0x70, 0x04, 0x89, 0xff, 0x84, 0x33, 0x7f, 0x00, 0xc7, 0x1e, 0x38, 0x70, 0x42, 0x28, 0xf9, 0x47,
	0xd0, 0xcc, 0xee, 0xda, 0xbb, 0xb6, 0x13, 0x62, 0x71, 0x9b, 0xf7, 0xeb, 0x33, 0x6f, 0xde, 0x7c,
	0xde, 0xbc, 0x5d, 0x58, 0xeb, 0x23, 0x15, 0xaa, 0x8b, 0x54, 0x05, 0xdd, 0x9d, 0xf1, 0x7a, 0x3b,
	0x10, 0x5c, 0x71, 0x52, 0x49, 0x18, 0xed, 0x77, 0x50, 0x3e, 0xa2, 0xdd, 0x01, 0x76, 0x02, 0xca,
	0x48, 0x03, 0x8a, 0x46, 0x78, 0x7d, 0xd0, 0xb0, 0x36, 0xad, 0x56, 0xce, 0x89, 0x45, 0xf2, 0x18,
	0x4a, 0x1d, 0x45, 0x85, 0xfa, 0x02, 0x2f, 0x1b, 0x99, 0x4d, 0xab, 0x55, 0x75, 0xc6, 0x32, 0x59,
	0x81, 0xc2, 0x0b, 0xe6, 0x69, 0x4b, 0xd6, 0x58, 0x22, 0xc9, 0xfe, 0x35, 0x03, 0xf5, 0x57, 0x7a,
	0xab, 0x7d, 0xa4, 0xca, 0xc1, 0xef, 0x46, 0x28, 0x15, 0xb1, 0xa1, 0xea, 0xf6, 0x29, 0xeb, 0xe1,
	0x29, 0xa2, 0x17, 0xed, 0x53, 0x76, 0x52, 0x3a, 0xf2, 0x11, 0x94, 0x2f, 0xa8, 0x42, 0x31, 0xa4,
	0xe2, 0xcc, 0xec, 0x56, 0xd9, 0x5d, 0xd9, 0x4e, 0x24, 0xbd, 0x7d, 0x1c, 0x5b, 0x9d, 0x89, 0x23,
	0xf9, 0x04, 0x4a, 0x52, 0x51, 0x35, 0x92, 0x28, 0x1b, 0xd9, 0xcd, 0x6c, 0xab, 0xb2, 0xbb, 0x9e,
	0x0a, 0x1a, 0x1f, 0xb3, 0x63, 0xbc, 0x9c, 0xb1, 0x37, 0x69, 0xc1, 0xb2, 0xcb, 0x87, 0x01, 0x0e,
	0x50, 0x61, 0x68, 0x6c, 0xe4, 0x36, 0xad, 0x56, 0xc9, 0x99, 0x56, 0x93, 0x67, 0x50, 0xbc, 0xa0,
	0x82, 0xf9, 0xac, 0xd7, 0xc8, 0x9b, 0xbc, 0x56, 0x53, 0x5b, 0x38, 0x23, 0xa6, 0x6d, 0x2f, 0x84,
	0xe0, 0xc2, 0x89, 0x3d, 0xc9, 0x53, 0xc8, 0xa2, 0x10, 0x8d, 0xc2, 0xbf, 0x05, 0x68, 0x2f, 0xfb,
	0x6b, 0x28, 0x8f, 0x4f, 0x17, 0x16, 0x0b, 0xdd, 0xb3, 0x80, 0xfb, 0x4c, 0x1d, 0xc9, 0xe8, 0x52,
	0x52, 0x3a, 0xd2, 0x04, 0x10, 0x28, 0xf9, 0xe0, 0x1c, 0xbd, 0x23, 0x69, 0xaa, 0x95, 0x73, 0x12,
	0x1a, 0xfb, 0x47, 0x0b, 0xea, 0x07, 0xbe, 0x0c, 0xa8, 0x72, 0xfb, 0x28, 0xf6, 0x5c, 0xe5, 0x73,
	0x46, 0xb6, 0x20, 0x27, 0x03, 0xca, 0x0c, 0xe0, 0x74, 0x71, 0xc7, 0x75, 0x72, 0x8c, 0x0f, 0x79,
	0x0a, 0x05, 0x6a, 0xa2, 0x0c, 0x78, 0x6d, 0xf7, 0x41, 0xca, 0x3b, 0x04, 0x74, 0x22, 0x17, 0xcd,
	0x93, 0x36, 0x1f, 0x0e, 0x7d, 0x9d, 0x6d, 0xd6, 0xe4, 0x32, 0x96, 0xed, 0x00, 0xee, 0x27, 0xe8,
	0x20, 0x03, 0xce, 0x24, 0x92, 0xe7, 0x50, 0x0c, 0x43, 0xf5, 0xe9, 0xf4, 0xa5, 0x6d, 0xa4, 0xe0,
	0xa7, 0x33, 0x77, 0x62, 0xef, 0x19, 0x22, 0x65, 0x66, 0x89, 0x64, 0xbf, 0x4d, 0x1e, 0xbd, 0xcd,
	0xd9, 0xa9, 0xdf, 0x5b, 0xe8, 0xe8, 0x0d, 0x28, 0x4a, 0xcd, 0xf2, 0x71, 0x61, 0x63, 0xd1, 0xfe,
	0xcb, 0x82, 0xd5, 0x8e, 0xdb, 0x47, 0x6f, 0x34, 0xc0, 0xc9, 0x16, 0x8b, 0x90, 0xfc, 0x63, 0x28,
	0xb8, 0x26, 0xa3, 0x88, 0xe1, 0x37, 0x9d, 0x3b, 0x4c, 0xdb, 0x89, 0x9c, 0x49, 0x1b, 0x6a, 0x32,
	0xda, 0x37, 0xac, 0x88, 0x29, 0x73, 0x6d, 0x77, 0x2d, 0x15, 0xde, 0x49, 0xb9, 0x38, 0x53, 0x21,
	0xe4, 0x09, 0x54, 0x7d, 0x79, 0x22, 0xd1, 0xe5, 0xcc, 0xa3, 0xe2, 0x32, 0x62, 0x7b, 0xc5, 0x97,
	0x9d, 0x58, 0x65, 0x1f, 0xc2, 0x83, 0x2f, 0xa9, 0xcf, 0x14, 0xf5, 0x19, 0x8a, 0x57, 0x31, 0x34,
	0xf9, 0x34, 0xd1, 0x64, 0xf3, 0xee, 0x6b, 0x12, 0x33, 0xdd, 0x65, 0xf6, 0x4f, 0x19, 0xa8, 0x4f,
	0x9b, 0xef, 0x54, 0xa9, 0x0d, 0x00, 0xbd, 0x3a, 0xd1, 0x48, 0x18, 0xdd, 0x73, 0x59, 0x6b, 0x34,
	0x06, 0x92, 0x0f, 0x21, 0x1f, 0x5a, 0xe6, 0x15, 0xa2, 0xcd, 0x87, 0x01, 0x67, 0xc8, 0x94, 0xf1,
	0x75, 0x42, 0x4f, 0xf2, 0x3f, 0xb8, 0x37, 0xe9, 0xa1, 0x13, 0x15, 0xb6, 0xfb, 0x74, 0x63, 0xa5,
	0x7a, 0x3d, 0xbb, 0x68, 0xaf, 0x67, 0xef, 0xd0, 0xeb, 0xcf, 0x61, 0xad, 0xcd, 0xb9, 0xf0, 0x7c,
	0x46, 0x15, 0x17, 0xfb, 0x9c, 0x2b, 0xa9, 0x04, 0x0d, 0x62, 0x16, 0x35, 0xa0, 0x78, 0x8e, 0x42,
	0xea, 0x3b, 0xd6, 0x65, 0xc9, 0x3a, 0xb1, 0x68, 0xbf, 0x83, 0xf5, 0xf9, 0x81, 0x51, 0x53, 0xfd,
	0x87, 0x5b, 0xfa, 0xcd, 0x82, 0xd5, 0x98, 0x7c, 0x13, 0xb7, 0x38, 0xa5, 0x37, 0xb0, 0x4c, 0x3d,
	0xef, 0x64, 0x38, 0x36, 0xc4, 0xf8, 0x4f, 0xd2, 0x8f, 0x82, 0xe7, 0xcd, 0xc4, 0x3a, 0x35, 0x9a,
	0xd4, 0x4a, 0xd2, 0x01, 0x22, 0x70, 0xc8, 0xcf, 0x31, 0x05, 0x97, 0x31, 0x70, 0xff, 0x4f, 0x57,
	0xce, 0xb8, 0xcd, 0x22, 0xde, 0x17, 0x53, 0x06, 0x69, 0xff, 0x60, 0xc1, 0xc3, 0x79, 0xbb, 0x93,
	0x1a, 0x64, 0x7c, 0x2f, 0xa2, 0x57, 0xc6, 0xf7, 0xf4, 0xd0, 0x4a, 0xb4, 0x5f, 0x75, 0xdc, 0x5f,
	0xd3, 0xad, 0x91, 0x9d, 0x69, 0x8d, 0x3b, 0xb1, 0xc7, 0x6e, 0xc3, 0xa3, 0x1b, 0xd2, 0x9e, 0x49,
	0xa5, 0x01, 0x45, 0x97, 0x4a, 0x97, 0x7a, 0x21, 0xb9, 0x4b, 0x4e, 0x2c, 0xda, 0x6f, 0xe1, 0xf1,
	0x24, 0x7c, 0x86, 0x1f, 0x77, 0xe9, 0x9d, 0x1b, 0x8e, 0x69, 0x7f, 0x0f, 0x6b, 0x73, 0x91, 0x23,
	0x02, 0xdd, 0x05, 0x3a, 0x39, 0x6f, 0x33, 0x8b, 0xcc, 0x5b, 0xfb, 0x33, 0x58, 0x99, 0x6c, 0xde,
	0x1e, 0x70, 0x89, 0x0b, 0x1c, 0xc9, 0x3e, 0x86, 0x47, 0x33, 0xd1, 0x0b, 0xa4, 0xad, 0xdf, 0xf4,
	0x91, 0xeb, 0xa2, 0x94, 0x71, 0xb5, 0x23, 0xd1, 0xfe, 0x25, 0x03, 0xf9, 0xf0, 0x49, 0x59, 0x87,
	0xf2, 0x6b, 0xb9, 0x3f, 0xe0, 0xee, 0x19, 0x86, 0x17, 0x55, 0x72, 0x26, 0x0a, 0x8d, 0x60, 0x96,
	0x93, 0xa9, 0x10, 0x89, 0xe4, 0x73, 0xa8, 0x85, 0xcb, 0xf8, 0xe8, 0xd1, 0x87, 0xc8, 0x4d, 0x53,
	0x66, 0xca, 0x9b, 0xbc, 0x81, 0x87, 0x5f, 0x21, 0x7a, 0x07, 0x82, 0x07, 0x01, 0x7a, 0x13, 0x94,
	0xdc, 0xad, 0x28, 0x73, 0x63, 0xc8, 0x4b, 0x20, 0x5a, 0xbf, 0xe7, 0x79, 0x49, 0xa4, 0xfc, 0xad,
	0x48, 0x73, 0x22, 0xec, 0x3f, 0x2c, 0x58, 0x9e, 0xba, 0xca, 0x85, 0x66, 0xe8, 0x4b, 0xa8, 0xbb,
	0xf1, 0x23, 0x7c, 0x12, 0x52, 0x20, 0xfa, 0x90, 0xb8, 0xf5, 0xa5, 0x5e, 0x76, 0x93, 0xf2, 0x48,
	0x7f, 0xa4, 0x25, 0x9e, 0xf9, 0xca, 0x2e, 0x49, 0xcf, 0xbb, 0x45, 0x5f, 0x77, 0xdb, 0x83, 0x6a,
	0xf2, 0x41, 0x26, 0x04, 0x72, 0xca, 0x1f, 0x62, 0x44, 0x19, 0xb3, 0xd6, 0x3a, 0xc6, 0xbd, 0x78,
	0xe4, 0x98, 0xb5, 0xd6, 0xb9, 0x5a, 0x97, 0x0d, 0x75, 0x7a, 0xad, 0x09, 0x31, 0x44, 0x29, 0x69,
	0x0f, 0xcd, 0x56, 0x65, 0x27, 0x16, 0xb7, 0x36, 0xa0, 0x10, 0x8d, 0xdc, 0x32, 0xe4, 0x8f, 0x85,
	0xaf, 0xb0, 0xbe, 0x44, 0x4a, 0x90, 0x3b, 0xa4, 0x52, 0xd6, 0xad, 0xad, 0x16, 0xd4, 0xd2, 0x93,
	0x9a, 0x00, 0x14, 0xda, 0x02, 0xa9, 0xf1, 0x03, 0x28, 0x84, 0x4f, 0x48, 0xdd, 0xda, 0x62, 0x50,
	0x4b, 0x17, 0x88, 0x54, 0xa0, 0xf8, 0x0d, 0x3b, 0x63, 0xfc, 0x82, 0x85, 0xae, 0x7b, 0x5d, 0x89,
	0x4c, 0xd5, 0x2d, 0x72, 0x0f, 0xca, 0x87, 0x02, 0x03, 0x2a, 0x7c, 0xd6, 0xab, 0x67, 0x48, 0x15,
	0x4a, 0xa1, 0x88, 0x5e, 0x3d, 0xab, 0xa3, 0x8e, 0xb9, 0x38, 0xd3, 0xa6, 0x9c, 0x36, 0x75, 0x14,
	0x0f, 0x02, 0x2d, 0xe5, 0xb5, 0xc9, 0x48, 0xe8, 0xd5, 0x0b, 0xfb, 0xed, 0xdf, 0xaf, 0x9a, 0xd6,
	0xfb, 0xab, 0xa6, 0xf5, 0xf7, 0x55, 0xd3, 0xfa, 0xf9, 0xba, 0xb9, 0xf4, 0xfe, 0xba, 0xb9, 0xf4,
	0xe7, 0x75, 0x73, 0xe9, 0xdb, 0x0f, 0x7a, 0xbe, 0xea, 0x8f, 0xba, 0xdb, 0x2e, 0x1f, 0xee, 0x9c,
	0x0e, 0xf8, 0x45, 0x17, 0xfb, 0x34, 0x08, 0x2e, 0x77, 0x94, 0xdf, 0xa3, 0x0a, 0x77, 0x12, 0xb7,
	0xd2, 0x2d, 0x98, 0xff, 0x8d, 0x67, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x36, 0x63, 0x6a,
	0x8e, 0x0c, 0x00, 0x00,
}

func (m *TableSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.TableID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Warning != nil {
		{
			size, err := m.Warning.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CompeleteStatus {
		i--
		if m.CompeleteStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Watermark != nil {
		{
			size, err := m.Watermark.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Watermark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watermark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Watermark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x10
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommitTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x18
	}
	if m.Action != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DispatcherConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatcherConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatcherConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleDispatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleDispatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleDispatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSecondary {
		i--
		if m.IsSecondary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduleAction != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ScheduleAction))
		i--
		dAtA[i] = 0x18
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		for iNdEx := len(m.Err) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Err[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Warning) > 0 {
		for iNdEx := len(m.Warning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Warning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FeedState) > 0 {
		i -= len(m.FeedState)
		copy(dAtA[i:], m.FeedState)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.FeedState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoordinatorBootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorBootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorBootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoordinatorBootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorBootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorBootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DispatchMaintainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchMaintainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchMaintainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoveMaintainers) > 0 {
		for iNdEx := len(m.RemoveMaintainers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveMaintainers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AddMaintainers) > 0 {
		for iNdEx := len(m.AddMaintainers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddMaintainers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddMaintainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMaintainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMaintainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.IsSecondary {
		i--
		if m.IsSecondary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMaintainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMaintainerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMaintainerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cascade {
		i--
		if m.Cascade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerBootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerBootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerBootstrapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerBootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerBootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerBootstrapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaintainerCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaintainerCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaintainerCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChangefeedID) > 0 {
		i -= len(m.ChangefeedID)
		copy(dAtA[i:], m.ChangefeedID)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.ChangefeedID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NeedAddedTableSpan) > 0 {
		for iNdEx := len(m.NeedAddedTableSpan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NeedAddedTableSpan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NeedDroppedTableSpan) > 0 {
		for iNdEx := len(m.NeedDroppedTableSpan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NeedDroppedTableSpan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BlockTableSpan) > 0 {
		for iNdEx := len(m.BlockTableSpan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockTableSpan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHeartbeat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BlockTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.BlockTs))
		i--
		dAtA[i] = 0x10
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableSpanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSpanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x20
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ComponentStatus != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ComponentStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunningError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunningError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunningError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeartbeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TableSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovHeartbeat(uint64(m.TableID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *HeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Watermark != nil {
		l = m.Watermark.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if m.CompeleteStatus {
		n += 2
	}
	if m.Warning != nil {
		l = m.Warning.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *Watermark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.ResolvedTs))
	}
	return n
}

func (m *DispatcherAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovHeartbeat(uint64(m.Action))
	}
	if m.CommitTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CommitTs))
	}
	return n
}

func (m *HeartBeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *DispatcherConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.StartTs))
	}
	return n
}

func (m *ScheduleDispatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ScheduleAction != 0 {
		n += 1 + sovHeartbeat(uint64(m.ScheduleAction))
	}
	if m.IsSecondary {
		n += 2
	}
	return n
}

func (m *MaintainerHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *MaintainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.FeedState)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHeartbeat(uint64(m.State))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	if len(m.Warning) > 0 {
		for _, e := range m.Warning {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if len(m.Err) > 0 {
		for _, e := range m.Err {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *CoordinatorBootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovHeartbeat(uint64(m.Version))
	}
	return n
}

func (m *CoordinatorBootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *DispatchMaintainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddMaintainers) > 0 {
		for _, e := range m.AddMaintainers {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if len(m.RemoveMaintainers) > 0 {
		for _, e := range m.RemoveMaintainers {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *AddMaintainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.IsSecondary {
		n += 2
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *RemoveMaintainerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Cascade {
		n += 2
	}
	return n
}

func (m *MaintainerBootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *MaintainerBootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *MaintainerCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *MaintainerCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChangefeedID)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBlocked {
		n += 2
	}
	if m.BlockTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.BlockTs))
	}
	if len(m.BlockTableSpan) > 0 {
		for _, e := range m.BlockTableSpan {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if len(m.NeedDroppedTableSpan) > 0 {
		for _, e := range m.NeedDroppedTableSpan {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	if len(m.NeedAddedTableSpan) > 0 {
		for _, e := range m.NeedAddedTableSpan {
			l = e.Size()
			n += 1 + l + sovHeartbeat(uint64(l))
		}
	}
	return n
}

func (m *TableSpanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ComponentStatus != 0 {
		n += 1 + sovHeartbeat(uint64(m.ComponentStatus))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovHeartbeat(uint64(m.CheckpointTs))
	}
	return n
}

func (m *RunningError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watermark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watermark == nil {
				m.Watermark = &Watermark{}
			}
			if err := m.Watermark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &TableSpanStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompeleteStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompeleteStatus = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Warning == nil {
				m.Warning = &RunningError{}
			}
			if err := m.Warning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &RunningError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Watermark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watermark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watermark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &DispatcherAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatcherConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatcherConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatcherConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleDispatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleDispatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleDispatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DispatcherConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAction", wireType)
			}
			m.ScheduleAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleAction |= ScheduleAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSecondary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSecondary = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &MaintainerStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ComponentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = append(m.Warning, &RunningError{})
			if err := m.Warning[len(m.Warning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = append(m.Err, &RunningError{})
			if err := m.Err[len(m.Err)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorBootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorBootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorBootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorBootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorBootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorBootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &MaintainerStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchMaintainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchMaintainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchMaintainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMaintainers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddMaintainers = append(m.AddMaintainers, &AddMaintainerRequest{})
			if err := m.AddMaintainers[len(m.AddMaintainers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveMaintainers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveMaintainers = append(m.RemoveMaintainers, &RemoveMaintainerRequest{})
			if err := m.RemoveMaintainers[len(m.RemoveMaintainers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMaintainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMaintainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMaintainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSecondary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSecondary = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMaintainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMaintainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMaintainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cascade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerBootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerBootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerBootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerBootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerBootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerBootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &TableSpanStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaintainerCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaintainerCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaintainerCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangefeedID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangefeedID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTs", wireType)
			}
			m.BlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTableSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockTableSpan = append(m.BlockTableSpan, &TableSpan{})
			if err := m.BlockTableSpan[len(m.BlockTableSpan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDroppedTableSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeedDroppedTableSpan = append(m.NeedDroppedTableSpan, &TableSpan{})
			if err := m.NeedDroppedTableSpan[len(m.NeedDroppedTableSpan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedAddedTableSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeedAddedTableSpan = append(m.NeedAddedTableSpan, &TableSpan{})
			if err := m.NeedAddedTableSpan[len(m.NeedAddedTableSpan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSpanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &TableSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentStatus", wireType)
			}
			m.ComponentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComponentStatus |= ComponentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunningError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeartbeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeartbeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeartbeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeartbeat = fmt.Errorf("proto: unexpected end of group")
)
