syntax = "proto3";
package eventpb;
option go_package = "github.com/flowbehappy/tigate/eventpb";

import "heartbeatpb/heartbeat.proto";

message EventFilterRule {
    repeated string matcher = 1;
    repeated string ignore_event = 2;
    repeated string ignore_sql = 3;
    string ignore_insert_value_expr = 4;
    string ignore_update_new_value_expr = 5;
    string ignore_update_old_value_expr = 6;
    string ignore_delete_value_expr = 7;
}

message FilterConfig {
    repeated string rules = 1;
    repeated uint64 ignore_txn_start_ts = 2;
    repeated EventFilterRule EventFilters = 3;
}


message ResolvedTs {

}

enum OpType {
	OpTypePut = 0;
	OpTypeDelete = 1;
}

message Event {
    bytes key = 1;
	// nil for delete type
	bytes value = 2;
	// nil for insert type
	bytes OldValue = 3;
    OpType op_type = 4;

}

message TxnEvent {
    repeated Event events = 1;
    uint64 commit_ts = 2; // 跟上述 event 同时出现 -- 就是标记目前达成的 resolvedTs
    uint64 start_ts = 3; // 事务开始时间戳
}

message TableInfo {

}

message EventFeed {
    repeated TxnEvent txn_events = 1; // 包含多个 txn events
    uint64 resolved_ts = 2; // 跟上述 event 同时出现 -- 就是标记目前达成的 resolvedTs
    heartbeatpb.DispatcherID dispatcher_id = 3; // 表示这个 event 是 对应哪个 dispatcher 的
    float ratio = 4; // 表示这个 event 应该被发送到哪个 dispatcher 的 ratio
    TableInfo table_info = 5; // 包含 table 相关信息，包括表名，主键，列名等
}

enum ActionType {
    ACTION_TYPE_UNSPECIFIED = 0;
    ACTION_TYPE_REGISTER = 1;
    ACTION_TYPE_REMOVE = 2;
    ACTION_TYPE_PAUSE = 3;
    ACTION_TYPE_RESUME = 4;
}

message RegisterDispatcherRequest {
    heartbeatpb.DispatcherID dispatcher_id = 1;
    heartbeatpb.TableSpan table_span = 2;
    uint64 start_ts = 3;
    string server_id = 4;
    ActionType action_type = 5;
    string namespace = 6;
    string changefeed_id = 7;
    FilterConfig filter_config = 8;
    bool enable_sync_point = 9;
    uint64 sync_point_ts = 10;
    uint64 sync_point_interval = 11;
}
